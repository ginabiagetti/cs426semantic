/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;

using  comp5210.analysis;

namespace comp5210.node {

public abstract class PProgram : Node
{
}

public abstract class PConstants : Node
{
}

public abstract class PMethods : Node
{
}

public abstract class PMethodHeader : Node
{
}

public abstract class PMainMethod : Node
{
}

public abstract class PMainHeader : Node
{
}

public abstract class PList : Node
{
}

public abstract class PProcedureCall : Node
{
}

public abstract class PFormalParameters : Node
{
}

public abstract class PActualParameters : Node
{
}

public abstract class PParameters : Node
{
}

public abstract class PVarDeclare : Node
{
}

public abstract class PConstantDeclare : Node
{
}

public abstract class PArrayDeclare : Node
{
}

public abstract class PIfStatement : Node
{
}

public abstract class PWhileLoop : Node
{
}

public abstract class PAssignStatement : Node
{
}

public abstract class PExp : Node
{
}

public abstract class PComparators : Node
{
}

public abstract class PMath1 : Node
{
}

public abstract class PMath2 : Node
{
}

public abstract class PEndExp : Node
{
}

public abstract class PNumber : Node
{
}


public sealed class AProgram : PProgram
{
    private PConstants _constants_;
    private PMethods _methods_;
    private PMainMethod _main_method_;

    public AProgram ()
    {
    }

    public AProgram (
            PConstants _constants_,
            PMethods _methods_,
            PMainMethod _main_method_
    )
    {
        SetConstants (_constants_);
        SetMethods (_methods_);
        SetMainMethod (_main_method_);
    }

    public override Object Clone()
    {
        return new AProgram (
            (PConstants)CloneNode (_constants_),
            (PMethods)CloneNode (_methods_),
            (PMainMethod)CloneNode (_main_method_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAProgram(this);
    }

    public PConstants GetConstants ()
    {
        return _constants_;
    }

    public void SetConstants (PConstants node)
    {
        if(_constants_ != null)
        {
            _constants_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _constants_ = node;
    }
    public PMethods GetMethods ()
    {
        return _methods_;
    }

    public void SetMethods (PMethods node)
    {
        if(_methods_ != null)
        {
            _methods_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _methods_ = node;
    }
    public PMainMethod GetMainMethod ()
    {
        return _main_method_;
    }

    public void SetMainMethod (PMainMethod node)
    {
        if(_main_method_ != null)
        {
            _main_method_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _main_method_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_constants_)
            + ToString (_methods_)
            + ToString (_main_method_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _constants_ == child )
        {
            _constants_ = null;
            return;
        }
        if ( _methods_ == child )
        {
            _methods_ = null;
            return;
        }
        if ( _main_method_ == child )
        {
            _main_method_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _constants_ == oldChild )
        {
            SetConstants ((PConstants) newChild);
            return;
        }
        if ( _methods_ == oldChild )
        {
            SetMethods ((PMethods) newChild);
            return;
        }
        if ( _main_method_ == oldChild )
        {
            SetMainMethod ((PMainMethod) newChild);
            return;
        }
    }

}
public sealed class AConstantConstants : PConstants
{
    private PConstantDeclare _constant_declare_;
    private PConstants _constants_;

    public AConstantConstants ()
    {
    }

    public AConstantConstants (
            PConstantDeclare _constant_declare_,
            PConstants _constants_
    )
    {
        SetConstantDeclare (_constant_declare_);
        SetConstants (_constants_);
    }

    public override Object Clone()
    {
        return new AConstantConstants (
            (PConstantDeclare)CloneNode (_constant_declare_),
            (PConstants)CloneNode (_constants_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAConstantConstants(this);
    }

    public PConstantDeclare GetConstantDeclare ()
    {
        return _constant_declare_;
    }

    public void SetConstantDeclare (PConstantDeclare node)
    {
        if(_constant_declare_ != null)
        {
            _constant_declare_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _constant_declare_ = node;
    }
    public PConstants GetConstants ()
    {
        return _constants_;
    }

    public void SetConstants (PConstants node)
    {
        if(_constants_ != null)
        {
            _constants_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _constants_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_constant_declare_)
            + ToString (_constants_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _constant_declare_ == child )
        {
            _constant_declare_ = null;
            return;
        }
        if ( _constants_ == child )
        {
            _constants_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _constant_declare_ == oldChild )
        {
            SetConstantDeclare ((PConstantDeclare) newChild);
            return;
        }
        if ( _constants_ == oldChild )
        {
            SetConstants ((PConstants) newChild);
            return;
        }
    }

}
public sealed class ANothingConstants : PConstants
{


    public ANothingConstants (
    )
    {
    }

    public override Object Clone()
    {
        return new ANothingConstants (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANothingConstants(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AMultipleMethods : PMethods
{
    private PMethods _methods_;
    private PMethodHeader _method_header_;
    private TOpenBrace _open_brace_;
    private PList _list_;
    private TCloseBrace _close_brace_;

    public AMultipleMethods ()
    {
    }

    public AMultipleMethods (
            PMethods _methods_,
            PMethodHeader _method_header_,
            TOpenBrace _open_brace_,
            PList _list_,
            TCloseBrace _close_brace_
    )
    {
        SetMethods (_methods_);
        SetMethodHeader (_method_header_);
        SetOpenBrace (_open_brace_);
        SetList (_list_);
        SetCloseBrace (_close_brace_);
    }

    public override Object Clone()
    {
        return new AMultipleMethods (
            (PMethods)CloneNode (_methods_),
            (PMethodHeader)CloneNode (_method_header_),
            (TOpenBrace)CloneNode (_open_brace_),
            (PList)CloneNode (_list_),
            (TCloseBrace)CloneNode (_close_brace_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultipleMethods(this);
    }

    public PMethods GetMethods ()
    {
        return _methods_;
    }

    public void SetMethods (PMethods node)
    {
        if(_methods_ != null)
        {
            _methods_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _methods_ = node;
    }
    public PMethodHeader GetMethodHeader ()
    {
        return _method_header_;
    }

    public void SetMethodHeader (PMethodHeader node)
    {
        if(_method_header_ != null)
        {
            _method_header_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _method_header_ = node;
    }
    public TOpenBrace GetOpenBrace ()
    {
        return _open_brace_;
    }

    public void SetOpenBrace (TOpenBrace node)
    {
        if(_open_brace_ != null)
        {
            _open_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_brace_ = node;
    }
    public PList GetList ()
    {
        return _list_;
    }

    public void SetList (PList node)
    {
        if(_list_ != null)
        {
            _list_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _list_ = node;
    }
    public TCloseBrace GetCloseBrace ()
    {
        return _close_brace_;
    }

    public void SetCloseBrace (TCloseBrace node)
    {
        if(_close_brace_ != null)
        {
            _close_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _close_brace_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_methods_)
            + ToString (_method_header_)
            + ToString (_open_brace_)
            + ToString (_list_)
            + ToString (_close_brace_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _methods_ == child )
        {
            _methods_ = null;
            return;
        }
        if ( _method_header_ == child )
        {
            _method_header_ = null;
            return;
        }
        if ( _open_brace_ == child )
        {
            _open_brace_ = null;
            return;
        }
        if ( _list_ == child )
        {
            _list_ = null;
            return;
        }
        if ( _close_brace_ == child )
        {
            _close_brace_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _methods_ == oldChild )
        {
            SetMethods ((PMethods) newChild);
            return;
        }
        if ( _method_header_ == oldChild )
        {
            SetMethodHeader ((PMethodHeader) newChild);
            return;
        }
        if ( _open_brace_ == oldChild )
        {
            SetOpenBrace ((TOpenBrace) newChild);
            return;
        }
        if ( _list_ == oldChild )
        {
            SetList ((PList) newChild);
            return;
        }
        if ( _close_brace_ == oldChild )
        {
            SetCloseBrace ((TCloseBrace) newChild);
            return;
        }
    }

}
public sealed class ANothingMethods : PMethods
{


    public ANothingMethods (
    )
    {
    }

    public override Object Clone()
    {
        return new ANothingMethods (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANothingMethods(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AFullMethodHeader : PMethodHeader
{
    private TPublic _public_;
    private TId _void_;
    private TId _name_;
    private TOpenParenthesis _open_parenthesis_;
    private PFormalParameters _formal_parameters_;
    private TCloseParenthesis _close_parenthesis_;

    public AFullMethodHeader ()
    {
    }

    public AFullMethodHeader (
            TPublic _public_,
            TId _void_,
            TId _name_,
            TOpenParenthesis _open_parenthesis_,
            PFormalParameters _formal_parameters_,
            TCloseParenthesis _close_parenthesis_
    )
    {
        SetPublic (_public_);
        SetVoid (_void_);
        SetName (_name_);
        SetOpenParenthesis (_open_parenthesis_);
        SetFormalParameters (_formal_parameters_);
        SetCloseParenthesis (_close_parenthesis_);
    }

    public override Object Clone()
    {
        return new AFullMethodHeader (
            (TPublic)CloneNode (_public_),
            (TId)CloneNode (_void_),
            (TId)CloneNode (_name_),
            (TOpenParenthesis)CloneNode (_open_parenthesis_),
            (PFormalParameters)CloneNode (_formal_parameters_),
            (TCloseParenthesis)CloneNode (_close_parenthesis_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFullMethodHeader(this);
    }

    public TPublic GetPublic ()
    {
        return _public_;
    }

    public void SetPublic (TPublic node)
    {
        if(_public_ != null)
        {
            _public_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _public_ = node;
    }
    public TId GetVoid ()
    {
        return _void_;
    }

    public void SetVoid (TId node)
    {
        if(_void_ != null)
        {
            _void_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _void_ = node;
    }
    public TId GetName ()
    {
        return _name_;
    }

    public void SetName (TId node)
    {
        if(_name_ != null)
        {
            _name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _name_ = node;
    }
    public TOpenParenthesis GetOpenParenthesis ()
    {
        return _open_parenthesis_;
    }

    public void SetOpenParenthesis (TOpenParenthesis node)
    {
        if(_open_parenthesis_ != null)
        {
            _open_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_parenthesis_ = node;
    }
    public PFormalParameters GetFormalParameters ()
    {
        return _formal_parameters_;
    }

    public void SetFormalParameters (PFormalParameters node)
    {
        if(_formal_parameters_ != null)
        {
            _formal_parameters_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _formal_parameters_ = node;
    }
    public TCloseParenthesis GetCloseParenthesis ()
    {
        return _close_parenthesis_;
    }

    public void SetCloseParenthesis (TCloseParenthesis node)
    {
        if(_close_parenthesis_ != null)
        {
            _close_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _close_parenthesis_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_public_)
            + ToString (_void_)
            + ToString (_name_)
            + ToString (_open_parenthesis_)
            + ToString (_formal_parameters_)
            + ToString (_close_parenthesis_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _public_ == child )
        {
            _public_ = null;
            return;
        }
        if ( _void_ == child )
        {
            _void_ = null;
            return;
        }
        if ( _name_ == child )
        {
            _name_ = null;
            return;
        }
        if ( _open_parenthesis_ == child )
        {
            _open_parenthesis_ = null;
            return;
        }
        if ( _formal_parameters_ == child )
        {
            _formal_parameters_ = null;
            return;
        }
        if ( _close_parenthesis_ == child )
        {
            _close_parenthesis_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _public_ == oldChild )
        {
            SetPublic ((TPublic) newChild);
            return;
        }
        if ( _void_ == oldChild )
        {
            SetVoid ((TId) newChild);
            return;
        }
        if ( _name_ == oldChild )
        {
            SetName ((TId) newChild);
            return;
        }
        if ( _open_parenthesis_ == oldChild )
        {
            SetOpenParenthesis ((TOpenParenthesis) newChild);
            return;
        }
        if ( _formal_parameters_ == oldChild )
        {
            SetFormalParameters ((PFormalParameters) newChild);
            return;
        }
        if ( _close_parenthesis_ == oldChild )
        {
            SetCloseParenthesis ((TCloseParenthesis) newChild);
            return;
        }
    }

}
public sealed class AEmptyMethodHeader : PMethodHeader
{
    private TPublic _public_;
    private TId _void_;
    private TId _name_;
    private TOpenParenthesis _open_parenthesis_;
    private TCloseParenthesis _close_parenthesis_;

    public AEmptyMethodHeader ()
    {
    }

    public AEmptyMethodHeader (
            TPublic _public_,
            TId _void_,
            TId _name_,
            TOpenParenthesis _open_parenthesis_,
            TCloseParenthesis _close_parenthesis_
    )
    {
        SetPublic (_public_);
        SetVoid (_void_);
        SetName (_name_);
        SetOpenParenthesis (_open_parenthesis_);
        SetCloseParenthesis (_close_parenthesis_);
    }

    public override Object Clone()
    {
        return new AEmptyMethodHeader (
            (TPublic)CloneNode (_public_),
            (TId)CloneNode (_void_),
            (TId)CloneNode (_name_),
            (TOpenParenthesis)CloneNode (_open_parenthesis_),
            (TCloseParenthesis)CloneNode (_close_parenthesis_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAEmptyMethodHeader(this);
    }

    public TPublic GetPublic ()
    {
        return _public_;
    }

    public void SetPublic (TPublic node)
    {
        if(_public_ != null)
        {
            _public_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _public_ = node;
    }
    public TId GetVoid ()
    {
        return _void_;
    }

    public void SetVoid (TId node)
    {
        if(_void_ != null)
        {
            _void_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _void_ = node;
    }
    public TId GetName ()
    {
        return _name_;
    }

    public void SetName (TId node)
    {
        if(_name_ != null)
        {
            _name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _name_ = node;
    }
    public TOpenParenthesis GetOpenParenthesis ()
    {
        return _open_parenthesis_;
    }

    public void SetOpenParenthesis (TOpenParenthesis node)
    {
        if(_open_parenthesis_ != null)
        {
            _open_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_parenthesis_ = node;
    }
    public TCloseParenthesis GetCloseParenthesis ()
    {
        return _close_parenthesis_;
    }

    public void SetCloseParenthesis (TCloseParenthesis node)
    {
        if(_close_parenthesis_ != null)
        {
            _close_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _close_parenthesis_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_public_)
            + ToString (_void_)
            + ToString (_name_)
            + ToString (_open_parenthesis_)
            + ToString (_close_parenthesis_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _public_ == child )
        {
            _public_ = null;
            return;
        }
        if ( _void_ == child )
        {
            _void_ = null;
            return;
        }
        if ( _name_ == child )
        {
            _name_ = null;
            return;
        }
        if ( _open_parenthesis_ == child )
        {
            _open_parenthesis_ = null;
            return;
        }
        if ( _close_parenthesis_ == child )
        {
            _close_parenthesis_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _public_ == oldChild )
        {
            SetPublic ((TPublic) newChild);
            return;
        }
        if ( _void_ == oldChild )
        {
            SetVoid ((TId) newChild);
            return;
        }
        if ( _name_ == oldChild )
        {
            SetName ((TId) newChild);
            return;
        }
        if ( _open_parenthesis_ == oldChild )
        {
            SetOpenParenthesis ((TOpenParenthesis) newChild);
            return;
        }
        if ( _close_parenthesis_ == oldChild )
        {
            SetCloseParenthesis ((TCloseParenthesis) newChild);
            return;
        }
    }

}
public sealed class AMainMethod : PMainMethod
{
    private PMainHeader _main_header_;
    private TOpenBrace _open_brace_;
    private PList _list_;
    private TCloseBrace _close_brace_;

    public AMainMethod ()
    {
    }

    public AMainMethod (
            PMainHeader _main_header_,
            TOpenBrace _open_brace_,
            PList _list_,
            TCloseBrace _close_brace_
    )
    {
        SetMainHeader (_main_header_);
        SetOpenBrace (_open_brace_);
        SetList (_list_);
        SetCloseBrace (_close_brace_);
    }

    public override Object Clone()
    {
        return new AMainMethod (
            (PMainHeader)CloneNode (_main_header_),
            (TOpenBrace)CloneNode (_open_brace_),
            (PList)CloneNode (_list_),
            (TCloseBrace)CloneNode (_close_brace_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMainMethod(this);
    }

    public PMainHeader GetMainHeader ()
    {
        return _main_header_;
    }

    public void SetMainHeader (PMainHeader node)
    {
        if(_main_header_ != null)
        {
            _main_header_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _main_header_ = node;
    }
    public TOpenBrace GetOpenBrace ()
    {
        return _open_brace_;
    }

    public void SetOpenBrace (TOpenBrace node)
    {
        if(_open_brace_ != null)
        {
            _open_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_brace_ = node;
    }
    public PList GetList ()
    {
        return _list_;
    }

    public void SetList (PList node)
    {
        if(_list_ != null)
        {
            _list_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _list_ = node;
    }
    public TCloseBrace GetCloseBrace ()
    {
        return _close_brace_;
    }

    public void SetCloseBrace (TCloseBrace node)
    {
        if(_close_brace_ != null)
        {
            _close_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _close_brace_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_main_header_)
            + ToString (_open_brace_)
            + ToString (_list_)
            + ToString (_close_brace_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _main_header_ == child )
        {
            _main_header_ = null;
            return;
        }
        if ( _open_brace_ == child )
        {
            _open_brace_ = null;
            return;
        }
        if ( _list_ == child )
        {
            _list_ = null;
            return;
        }
        if ( _close_brace_ == child )
        {
            _close_brace_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _main_header_ == oldChild )
        {
            SetMainHeader ((PMainHeader) newChild);
            return;
        }
        if ( _open_brace_ == oldChild )
        {
            SetOpenBrace ((TOpenBrace) newChild);
            return;
        }
        if ( _list_ == oldChild )
        {
            SetList ((PList) newChild);
            return;
        }
        if ( _close_brace_ == oldChild )
        {
            SetCloseBrace ((TCloseBrace) newChild);
            return;
        }
    }

}
public sealed class AMainHeader : PMainHeader
{
    private TPublic _public_;
    private TId _id_;
    private TMain _main_;
    private TOpenParenthesis _open_parenthesis_;
    private TCloseParenthesis _close_parenthesis_;

    public AMainHeader ()
    {
    }

    public AMainHeader (
            TPublic _public_,
            TId _id_,
            TMain _main_,
            TOpenParenthesis _open_parenthesis_,
            TCloseParenthesis _close_parenthesis_
    )
    {
        SetPublic (_public_);
        SetId (_id_);
        SetMain (_main_);
        SetOpenParenthesis (_open_parenthesis_);
        SetCloseParenthesis (_close_parenthesis_);
    }

    public override Object Clone()
    {
        return new AMainHeader (
            (TPublic)CloneNode (_public_),
            (TId)CloneNode (_id_),
            (TMain)CloneNode (_main_),
            (TOpenParenthesis)CloneNode (_open_parenthesis_),
            (TCloseParenthesis)CloneNode (_close_parenthesis_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMainHeader(this);
    }

    public TPublic GetPublic ()
    {
        return _public_;
    }

    public void SetPublic (TPublic node)
    {
        if(_public_ != null)
        {
            _public_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _public_ = node;
    }
    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TMain GetMain ()
    {
        return _main_;
    }

    public void SetMain (TMain node)
    {
        if(_main_ != null)
        {
            _main_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _main_ = node;
    }
    public TOpenParenthesis GetOpenParenthesis ()
    {
        return _open_parenthesis_;
    }

    public void SetOpenParenthesis (TOpenParenthesis node)
    {
        if(_open_parenthesis_ != null)
        {
            _open_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_parenthesis_ = node;
    }
    public TCloseParenthesis GetCloseParenthesis ()
    {
        return _close_parenthesis_;
    }

    public void SetCloseParenthesis (TCloseParenthesis node)
    {
        if(_close_parenthesis_ != null)
        {
            _close_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _close_parenthesis_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_public_)
            + ToString (_id_)
            + ToString (_main_)
            + ToString (_open_parenthesis_)
            + ToString (_close_parenthesis_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _public_ == child )
        {
            _public_ = null;
            return;
        }
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _main_ == child )
        {
            _main_ = null;
            return;
        }
        if ( _open_parenthesis_ == child )
        {
            _open_parenthesis_ = null;
            return;
        }
        if ( _close_parenthesis_ == child )
        {
            _close_parenthesis_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _public_ == oldChild )
        {
            SetPublic ((TPublic) newChild);
            return;
        }
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _main_ == oldChild )
        {
            SetMain ((TMain) newChild);
            return;
        }
        if ( _open_parenthesis_ == oldChild )
        {
            SetOpenParenthesis ((TOpenParenthesis) newChild);
            return;
        }
        if ( _close_parenthesis_ == oldChild )
        {
            SetCloseParenthesis ((TCloseParenthesis) newChild);
            return;
        }
    }

}
public sealed class AVarDeclareList : PList
{
    private PVarDeclare _var_declare_;
    private PList _list_;

    public AVarDeclareList ()
    {
    }

    public AVarDeclareList (
            PVarDeclare _var_declare_,
            PList _list_
    )
    {
        SetVarDeclare (_var_declare_);
        SetList (_list_);
    }

    public override Object Clone()
    {
        return new AVarDeclareList (
            (PVarDeclare)CloneNode (_var_declare_),
            (PList)CloneNode (_list_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAVarDeclareList(this);
    }

    public PVarDeclare GetVarDeclare ()
    {
        return _var_declare_;
    }

    public void SetVarDeclare (PVarDeclare node)
    {
        if(_var_declare_ != null)
        {
            _var_declare_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _var_declare_ = node;
    }
    public PList GetList ()
    {
        return _list_;
    }

    public void SetList (PList node)
    {
        if(_list_ != null)
        {
            _list_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _list_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_var_declare_)
            + ToString (_list_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _var_declare_ == child )
        {
            _var_declare_ = null;
            return;
        }
        if ( _list_ == child )
        {
            _list_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _var_declare_ == oldChild )
        {
            SetVarDeclare ((PVarDeclare) newChild);
            return;
        }
        if ( _list_ == oldChild )
        {
            SetList ((PList) newChild);
            return;
        }
    }

}
public sealed class AConDeclareList : PList
{
    private PConstantDeclare _constant_declare_;
    private PList _list_;

    public AConDeclareList ()
    {
    }

    public AConDeclareList (
            PConstantDeclare _constant_declare_,
            PList _list_
    )
    {
        SetConstantDeclare (_constant_declare_);
        SetList (_list_);
    }

    public override Object Clone()
    {
        return new AConDeclareList (
            (PConstantDeclare)CloneNode (_constant_declare_),
            (PList)CloneNode (_list_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAConDeclareList(this);
    }

    public PConstantDeclare GetConstantDeclare ()
    {
        return _constant_declare_;
    }

    public void SetConstantDeclare (PConstantDeclare node)
    {
        if(_constant_declare_ != null)
        {
            _constant_declare_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _constant_declare_ = node;
    }
    public PList GetList ()
    {
        return _list_;
    }

    public void SetList (PList node)
    {
        if(_list_ != null)
        {
            _list_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _list_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_constant_declare_)
            + ToString (_list_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _constant_declare_ == child )
        {
            _constant_declare_ = null;
            return;
        }
        if ( _list_ == child )
        {
            _list_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _constant_declare_ == oldChild )
        {
            SetConstantDeclare ((PConstantDeclare) newChild);
            return;
        }
        if ( _list_ == oldChild )
        {
            SetList ((PList) newChild);
            return;
        }
    }

}
public sealed class AWhileLoopList : PList
{
    private PWhileLoop _while_loop_;
    private PList _list_;

    public AWhileLoopList ()
    {
    }

    public AWhileLoopList (
            PWhileLoop _while_loop_,
            PList _list_
    )
    {
        SetWhileLoop (_while_loop_);
        SetList (_list_);
    }

    public override Object Clone()
    {
        return new AWhileLoopList (
            (PWhileLoop)CloneNode (_while_loop_),
            (PList)CloneNode (_list_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAWhileLoopList(this);
    }

    public PWhileLoop GetWhileLoop ()
    {
        return _while_loop_;
    }

    public void SetWhileLoop (PWhileLoop node)
    {
        if(_while_loop_ != null)
        {
            _while_loop_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _while_loop_ = node;
    }
    public PList GetList ()
    {
        return _list_;
    }

    public void SetList (PList node)
    {
        if(_list_ != null)
        {
            _list_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _list_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_while_loop_)
            + ToString (_list_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _while_loop_ == child )
        {
            _while_loop_ = null;
            return;
        }
        if ( _list_ == child )
        {
            _list_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _while_loop_ == oldChild )
        {
            SetWhileLoop ((PWhileLoop) newChild);
            return;
        }
        if ( _list_ == oldChild )
        {
            SetList ((PList) newChild);
            return;
        }
    }

}
public sealed class AIfStatementList : PList
{
    private PIfStatement _if_statement_;
    private PList _list_;

    public AIfStatementList ()
    {
    }

    public AIfStatementList (
            PIfStatement _if_statement_,
            PList _list_
    )
    {
        SetIfStatement (_if_statement_);
        SetList (_list_);
    }

    public override Object Clone()
    {
        return new AIfStatementList (
            (PIfStatement)CloneNode (_if_statement_),
            (PList)CloneNode (_list_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIfStatementList(this);
    }

    public PIfStatement GetIfStatement ()
    {
        return _if_statement_;
    }

    public void SetIfStatement (PIfStatement node)
    {
        if(_if_statement_ != null)
        {
            _if_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _if_statement_ = node;
    }
    public PList GetList ()
    {
        return _list_;
    }

    public void SetList (PList node)
    {
        if(_list_ != null)
        {
            _list_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _list_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_if_statement_)
            + ToString (_list_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _if_statement_ == child )
        {
            _if_statement_ = null;
            return;
        }
        if ( _list_ == child )
        {
            _list_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _if_statement_ == oldChild )
        {
            SetIfStatement ((PIfStatement) newChild);
            return;
        }
        if ( _list_ == oldChild )
        {
            SetList ((PList) newChild);
            return;
        }
    }

}
public sealed class AArrayDeclareList : PList
{
    private PArrayDeclare _array_declare_;
    private PList _list_;

    public AArrayDeclareList ()
    {
    }

    public AArrayDeclareList (
            PArrayDeclare _array_declare_,
            PList _list_
    )
    {
        SetArrayDeclare (_array_declare_);
        SetList (_list_);
    }

    public override Object Clone()
    {
        return new AArrayDeclareList (
            (PArrayDeclare)CloneNode (_array_declare_),
            (PList)CloneNode (_list_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAArrayDeclareList(this);
    }

    public PArrayDeclare GetArrayDeclare ()
    {
        return _array_declare_;
    }

    public void SetArrayDeclare (PArrayDeclare node)
    {
        if(_array_declare_ != null)
        {
            _array_declare_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _array_declare_ = node;
    }
    public PList GetList ()
    {
        return _list_;
    }

    public void SetList (PList node)
    {
        if(_list_ != null)
        {
            _list_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _list_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_array_declare_)
            + ToString (_list_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _array_declare_ == child )
        {
            _array_declare_ = null;
            return;
        }
        if ( _list_ == child )
        {
            _list_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _array_declare_ == oldChild )
        {
            SetArrayDeclare ((PArrayDeclare) newChild);
            return;
        }
        if ( _list_ == oldChild )
        {
            SetList ((PList) newChild);
            return;
        }
    }

}
public sealed class AAssignStatementList : PList
{
    private PAssignStatement _assign_statement_;
    private PList _list_;

    public AAssignStatementList ()
    {
    }

    public AAssignStatementList (
            PAssignStatement _assign_statement_,
            PList _list_
    )
    {
        SetAssignStatement (_assign_statement_);
        SetList (_list_);
    }

    public override Object Clone()
    {
        return new AAssignStatementList (
            (PAssignStatement)CloneNode (_assign_statement_),
            (PList)CloneNode (_list_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAssignStatementList(this);
    }

    public PAssignStatement GetAssignStatement ()
    {
        return _assign_statement_;
    }

    public void SetAssignStatement (PAssignStatement node)
    {
        if(_assign_statement_ != null)
        {
            _assign_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assign_statement_ = node;
    }
    public PList GetList ()
    {
        return _list_;
    }

    public void SetList (PList node)
    {
        if(_list_ != null)
        {
            _list_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _list_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_assign_statement_)
            + ToString (_list_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _assign_statement_ == child )
        {
            _assign_statement_ = null;
            return;
        }
        if ( _list_ == child )
        {
            _list_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _assign_statement_ == oldChild )
        {
            SetAssignStatement ((PAssignStatement) newChild);
            return;
        }
        if ( _list_ == oldChild )
        {
            SetList ((PList) newChild);
            return;
        }
    }

}
public sealed class AProcedureCallList : PList
{
    private PProcedureCall _procedure_call_;
    private PList _list_;

    public AProcedureCallList ()
    {
    }

    public AProcedureCallList (
            PProcedureCall _procedure_call_,
            PList _list_
    )
    {
        SetProcedureCall (_procedure_call_);
        SetList (_list_);
    }

    public override Object Clone()
    {
        return new AProcedureCallList (
            (PProcedureCall)CloneNode (_procedure_call_),
            (PList)CloneNode (_list_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAProcedureCallList(this);
    }

    public PProcedureCall GetProcedureCall ()
    {
        return _procedure_call_;
    }

    public void SetProcedureCall (PProcedureCall node)
    {
        if(_procedure_call_ != null)
        {
            _procedure_call_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _procedure_call_ = node;
    }
    public PList GetList ()
    {
        return _list_;
    }

    public void SetList (PList node)
    {
        if(_list_ != null)
        {
            _list_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _list_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_procedure_call_)
            + ToString (_list_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _procedure_call_ == child )
        {
            _procedure_call_ = null;
            return;
        }
        if ( _list_ == child )
        {
            _list_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _procedure_call_ == oldChild )
        {
            SetProcedureCall ((PProcedureCall) newChild);
            return;
        }
        if ( _list_ == oldChild )
        {
            SetList ((PList) newChild);
            return;
        }
    }

}
public sealed class ANothingList : PList
{


    public ANothingList (
    )
    {
    }

    public override Object Clone()
    {
        return new ANothingList (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANothingList(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class ACallProcedureCall : PProcedureCall
{
    private TId _id_;
    private TOpenParenthesis _open_parenthesis_;
    private PActualParameters _actual_parameters_;
    private TCloseParenthesis _close_parenthesis_;
    private TSemicolon _semicolon_;

    public ACallProcedureCall ()
    {
    }

    public ACallProcedureCall (
            TId _id_,
            TOpenParenthesis _open_parenthesis_,
            PActualParameters _actual_parameters_,
            TCloseParenthesis _close_parenthesis_,
            TSemicolon _semicolon_
    )
    {
        SetId (_id_);
        SetOpenParenthesis (_open_parenthesis_);
        SetActualParameters (_actual_parameters_);
        SetCloseParenthesis (_close_parenthesis_);
        SetSemicolon (_semicolon_);
    }

    public override Object Clone()
    {
        return new ACallProcedureCall (
            (TId)CloneNode (_id_),
            (TOpenParenthesis)CloneNode (_open_parenthesis_),
            (PActualParameters)CloneNode (_actual_parameters_),
            (TCloseParenthesis)CloneNode (_close_parenthesis_),
            (TSemicolon)CloneNode (_semicolon_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACallProcedureCall(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TOpenParenthesis GetOpenParenthesis ()
    {
        return _open_parenthesis_;
    }

    public void SetOpenParenthesis (TOpenParenthesis node)
    {
        if(_open_parenthesis_ != null)
        {
            _open_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_parenthesis_ = node;
    }
    public PActualParameters GetActualParameters ()
    {
        return _actual_parameters_;
    }

    public void SetActualParameters (PActualParameters node)
    {
        if(_actual_parameters_ != null)
        {
            _actual_parameters_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _actual_parameters_ = node;
    }
    public TCloseParenthesis GetCloseParenthesis ()
    {
        return _close_parenthesis_;
    }

    public void SetCloseParenthesis (TCloseParenthesis node)
    {
        if(_close_parenthesis_ != null)
        {
            _close_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _close_parenthesis_ = node;
    }
    public TSemicolon GetSemicolon ()
    {
        return _semicolon_;
    }

    public void SetSemicolon (TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semicolon_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_open_parenthesis_)
            + ToString (_actual_parameters_)
            + ToString (_close_parenthesis_)
            + ToString (_semicolon_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _open_parenthesis_ == child )
        {
            _open_parenthesis_ = null;
            return;
        }
        if ( _actual_parameters_ == child )
        {
            _actual_parameters_ = null;
            return;
        }
        if ( _close_parenthesis_ == child )
        {
            _close_parenthesis_ = null;
            return;
        }
        if ( _semicolon_ == child )
        {
            _semicolon_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _open_parenthesis_ == oldChild )
        {
            SetOpenParenthesis ((TOpenParenthesis) newChild);
            return;
        }
        if ( _actual_parameters_ == oldChild )
        {
            SetActualParameters ((PActualParameters) newChild);
            return;
        }
        if ( _close_parenthesis_ == oldChild )
        {
            SetCloseParenthesis ((TCloseParenthesis) newChild);
            return;
        }
        if ( _semicolon_ == oldChild )
        {
            SetSemicolon ((TSemicolon) newChild);
            return;
        }
    }

}
public sealed class ANothingProcedureCall : PProcedureCall
{
    private TId _id_;
    private TOpenParenthesis _open_parenthesis_;
    private TCloseParenthesis _close_parenthesis_;
    private TSemicolon _semicolon_;

    public ANothingProcedureCall ()
    {
    }

    public ANothingProcedureCall (
            TId _id_,
            TOpenParenthesis _open_parenthesis_,
            TCloseParenthesis _close_parenthesis_,
            TSemicolon _semicolon_
    )
    {
        SetId (_id_);
        SetOpenParenthesis (_open_parenthesis_);
        SetCloseParenthesis (_close_parenthesis_);
        SetSemicolon (_semicolon_);
    }

    public override Object Clone()
    {
        return new ANothingProcedureCall (
            (TId)CloneNode (_id_),
            (TOpenParenthesis)CloneNode (_open_parenthesis_),
            (TCloseParenthesis)CloneNode (_close_parenthesis_),
            (TSemicolon)CloneNode (_semicolon_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANothingProcedureCall(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TOpenParenthesis GetOpenParenthesis ()
    {
        return _open_parenthesis_;
    }

    public void SetOpenParenthesis (TOpenParenthesis node)
    {
        if(_open_parenthesis_ != null)
        {
            _open_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_parenthesis_ = node;
    }
    public TCloseParenthesis GetCloseParenthesis ()
    {
        return _close_parenthesis_;
    }

    public void SetCloseParenthesis (TCloseParenthesis node)
    {
        if(_close_parenthesis_ != null)
        {
            _close_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _close_parenthesis_ = node;
    }
    public TSemicolon GetSemicolon ()
    {
        return _semicolon_;
    }

    public void SetSemicolon (TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semicolon_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_open_parenthesis_)
            + ToString (_close_parenthesis_)
            + ToString (_semicolon_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _open_parenthesis_ == child )
        {
            _open_parenthesis_ = null;
            return;
        }
        if ( _close_parenthesis_ == child )
        {
            _close_parenthesis_ = null;
            return;
        }
        if ( _semicolon_ == child )
        {
            _semicolon_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _open_parenthesis_ == oldChild )
        {
            SetOpenParenthesis ((TOpenParenthesis) newChild);
            return;
        }
        if ( _close_parenthesis_ == oldChild )
        {
            SetCloseParenthesis ((TCloseParenthesis) newChild);
            return;
        }
        if ( _semicolon_ == oldChild )
        {
            SetSemicolon ((TSemicolon) newChild);
            return;
        }
    }

}
public sealed class AMoreFormalParameters : PFormalParameters
{
    private PFormalParameters _formal_parameters_;
    private TComma _comma_;
    private TId _type_;
    private TId _name_;

    public AMoreFormalParameters ()
    {
    }

    public AMoreFormalParameters (
            PFormalParameters _formal_parameters_,
            TComma _comma_,
            TId _type_,
            TId _name_
    )
    {
        SetFormalParameters (_formal_parameters_);
        SetComma (_comma_);
        SetType (_type_);
        SetName (_name_);
    }

    public override Object Clone()
    {
        return new AMoreFormalParameters (
            (PFormalParameters)CloneNode (_formal_parameters_),
            (TComma)CloneNode (_comma_),
            (TId)CloneNode (_type_),
            (TId)CloneNode (_name_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMoreFormalParameters(this);
    }

    public PFormalParameters GetFormalParameters ()
    {
        return _formal_parameters_;
    }

    public void SetFormalParameters (PFormalParameters node)
    {
        if(_formal_parameters_ != null)
        {
            _formal_parameters_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _formal_parameters_ = node;
    }
    public TComma GetComma ()
    {
        return _comma_;
    }

    public void SetComma (TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comma_ = node;
    }
    public TId GetType ()
    {
        return _type_;
    }

    public void SetType (TId node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public TId GetName ()
    {
        return _name_;
    }

    public void SetName (TId node)
    {
        if(_name_ != null)
        {
            _name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _name_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_formal_parameters_)
            + ToString (_comma_)
            + ToString (_type_)
            + ToString (_name_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _formal_parameters_ == child )
        {
            _formal_parameters_ = null;
            return;
        }
        if ( _comma_ == child )
        {
            _comma_ = null;
            return;
        }
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _name_ == child )
        {
            _name_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _formal_parameters_ == oldChild )
        {
            SetFormalParameters ((PFormalParameters) newChild);
            return;
        }
        if ( _comma_ == oldChild )
        {
            SetComma ((TComma) newChild);
            return;
        }
        if ( _type_ == oldChild )
        {
            SetType ((TId) newChild);
            return;
        }
        if ( _name_ == oldChild )
        {
            SetName ((TId) newChild);
            return;
        }
    }

}
public sealed class ALastFormalParameters : PFormalParameters
{
    private TId _type_;
    private TId _name_;

    public ALastFormalParameters ()
    {
    }

    public ALastFormalParameters (
            TId _type_,
            TId _name_
    )
    {
        SetType (_type_);
        SetName (_name_);
    }

    public override Object Clone()
    {
        return new ALastFormalParameters (
            (TId)CloneNode (_type_),
            (TId)CloneNode (_name_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALastFormalParameters(this);
    }

    public TId GetType ()
    {
        return _type_;
    }

    public void SetType (TId node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public TId GetName ()
    {
        return _name_;
    }

    public void SetName (TId node)
    {
        if(_name_ != null)
        {
            _name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _name_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_type_)
            + ToString (_name_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _name_ == child )
        {
            _name_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _type_ == oldChild )
        {
            SetType ((TId) newChild);
            return;
        }
        if ( _name_ == oldChild )
        {
            SetName ((TId) newChild);
            return;
        }
    }

}
public sealed class AMoreActualParameters : PActualParameters
{
    private PActualParameters _actual_parameters_;
    private TComma _comma_;
    private PParameters _parameters_;

    public AMoreActualParameters ()
    {
    }

    public AMoreActualParameters (
            PActualParameters _actual_parameters_,
            TComma _comma_,
            PParameters _parameters_
    )
    {
        SetActualParameters (_actual_parameters_);
        SetComma (_comma_);
        SetParameters (_parameters_);
    }

    public override Object Clone()
    {
        return new AMoreActualParameters (
            (PActualParameters)CloneNode (_actual_parameters_),
            (TComma)CloneNode (_comma_),
            (PParameters)CloneNode (_parameters_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMoreActualParameters(this);
    }

    public PActualParameters GetActualParameters ()
    {
        return _actual_parameters_;
    }

    public void SetActualParameters (PActualParameters node)
    {
        if(_actual_parameters_ != null)
        {
            _actual_parameters_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _actual_parameters_ = node;
    }
    public TComma GetComma ()
    {
        return _comma_;
    }

    public void SetComma (TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comma_ = node;
    }
    public PParameters GetParameters ()
    {
        return _parameters_;
    }

    public void SetParameters (PParameters node)
    {
        if(_parameters_ != null)
        {
            _parameters_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _parameters_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_actual_parameters_)
            + ToString (_comma_)
            + ToString (_parameters_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _actual_parameters_ == child )
        {
            _actual_parameters_ = null;
            return;
        }
        if ( _comma_ == child )
        {
            _comma_ = null;
            return;
        }
        if ( _parameters_ == child )
        {
            _parameters_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _actual_parameters_ == oldChild )
        {
            SetActualParameters ((PActualParameters) newChild);
            return;
        }
        if ( _comma_ == oldChild )
        {
            SetComma ((TComma) newChild);
            return;
        }
        if ( _parameters_ == oldChild )
        {
            SetParameters ((PParameters) newChild);
            return;
        }
    }

}
public sealed class ALastActualParameters : PActualParameters
{
    private PParameters _parameters_;

    public ALastActualParameters ()
    {
    }

    public ALastActualParameters (
            PParameters _parameters_
    )
    {
        SetParameters (_parameters_);
    }

    public override Object Clone()
    {
        return new ALastActualParameters (
            (PParameters)CloneNode (_parameters_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALastActualParameters(this);
    }

    public PParameters GetParameters ()
    {
        return _parameters_;
    }

    public void SetParameters (PParameters node)
    {
        if(_parameters_ != null)
        {
            _parameters_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _parameters_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_parameters_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _parameters_ == child )
        {
            _parameters_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _parameters_ == oldChild )
        {
            SetParameters ((PParameters) newChild);
            return;
        }
    }

}
public sealed class ANumbersParameters : PParameters
{
    private PExp _exp_;

    public ANumbersParameters ()
    {
    }

    public ANumbersParameters (
            PExp _exp_
    )
    {
        SetExp (_exp_);
    }

    public override Object Clone()
    {
        return new ANumbersParameters (
            (PExp)CloneNode (_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANumbersParameters(this);
    }

    public PExp GetExp ()
    {
        return _exp_;
    }

    public void SetExp (PExp node)
    {
        if(_exp_ != null)
        {
            _exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _exp_ == child )
        {
            _exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _exp_ == oldChild )
        {
            SetExp ((PExp) newChild);
            return;
        }
    }

}
public sealed class AStringsParameters : PParameters
{
    private TString _string_;

    public AStringsParameters ()
    {
    }

    public AStringsParameters (
            TString _string_
    )
    {
        SetString (_string_);
    }

    public override Object Clone()
    {
        return new AStringsParameters (
            (TString)CloneNode (_string_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAStringsParameters(this);
    }

    public TString GetString ()
    {
        return _string_;
    }

    public void SetString (TString node)
    {
        if(_string_ != null)
        {
            _string_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _string_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_string_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _string_ == child )
        {
            _string_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _string_ == oldChild )
        {
            SetString ((TString) newChild);
            return;
        }
    }

}
public sealed class AVarDeclare : PVarDeclare
{
    private TId _type_;
    private TId _name_;
    private TSemicolon _semicolon_;

    public AVarDeclare ()
    {
    }

    public AVarDeclare (
            TId _type_,
            TId _name_,
            TSemicolon _semicolon_
    )
    {
        SetType (_type_);
        SetName (_name_);
        SetSemicolon (_semicolon_);
    }

    public override Object Clone()
    {
        return new AVarDeclare (
            (TId)CloneNode (_type_),
            (TId)CloneNode (_name_),
            (TSemicolon)CloneNode (_semicolon_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAVarDeclare(this);
    }

    public TId GetType ()
    {
        return _type_;
    }

    public void SetType (TId node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public TId GetName ()
    {
        return _name_;
    }

    public void SetName (TId node)
    {
        if(_name_ != null)
        {
            _name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _name_ = node;
    }
    public TSemicolon GetSemicolon ()
    {
        return _semicolon_;
    }

    public void SetSemicolon (TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semicolon_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_type_)
            + ToString (_name_)
            + ToString (_semicolon_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _name_ == child )
        {
            _name_ = null;
            return;
        }
        if ( _semicolon_ == child )
        {
            _semicolon_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _type_ == oldChild )
        {
            SetType ((TId) newChild);
            return;
        }
        if ( _name_ == oldChild )
        {
            SetName ((TId) newChild);
            return;
        }
        if ( _semicolon_ == oldChild )
        {
            SetSemicolon ((TSemicolon) newChild);
            return;
        }
    }

}
public sealed class AIntDeclareConstantDeclare : PConstantDeclare
{
    private TCon _con_;
    private TId _type_;
    private TId _name_;
    private TEquals _equals_;
    private TInt _int_;
    private TSemicolon _semicolon_;

    public AIntDeclareConstantDeclare ()
    {
    }

    public AIntDeclareConstantDeclare (
            TCon _con_,
            TId _type_,
            TId _name_,
            TEquals _equals_,
            TInt _int_,
            TSemicolon _semicolon_
    )
    {
        SetCon (_con_);
        SetType (_type_);
        SetName (_name_);
        SetEquals (_equals_);
        SetInt (_int_);
        SetSemicolon (_semicolon_);
    }

    public override Object Clone()
    {
        return new AIntDeclareConstantDeclare (
            (TCon)CloneNode (_con_),
            (TId)CloneNode (_type_),
            (TId)CloneNode (_name_),
            (TEquals)CloneNode (_equals_),
            (TInt)CloneNode (_int_),
            (TSemicolon)CloneNode (_semicolon_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIntDeclareConstantDeclare(this);
    }

    public TCon GetCon ()
    {
        return _con_;
    }

    public void SetCon (TCon node)
    {
        if(_con_ != null)
        {
            _con_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _con_ = node;
    }
    public TId GetType ()
    {
        return _type_;
    }

    public void SetType (TId node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public TId GetName ()
    {
        return _name_;
    }

    public void SetName (TId node)
    {
        if(_name_ != null)
        {
            _name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _name_ = node;
    }
    public TEquals GetEquals ()
    {
        return _equals_;
    }

    public void SetEquals (TEquals node)
    {
        if(_equals_ != null)
        {
            _equals_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _equals_ = node;
    }
    public TInt GetInt ()
    {
        return _int_;
    }

    public void SetInt (TInt node)
    {
        if(_int_ != null)
        {
            _int_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _int_ = node;
    }
    public TSemicolon GetSemicolon ()
    {
        return _semicolon_;
    }

    public void SetSemicolon (TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semicolon_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_con_)
            + ToString (_type_)
            + ToString (_name_)
            + ToString (_equals_)
            + ToString (_int_)
            + ToString (_semicolon_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _con_ == child )
        {
            _con_ = null;
            return;
        }
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _name_ == child )
        {
            _name_ = null;
            return;
        }
        if ( _equals_ == child )
        {
            _equals_ = null;
            return;
        }
        if ( _int_ == child )
        {
            _int_ = null;
            return;
        }
        if ( _semicolon_ == child )
        {
            _semicolon_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _con_ == oldChild )
        {
            SetCon ((TCon) newChild);
            return;
        }
        if ( _type_ == oldChild )
        {
            SetType ((TId) newChild);
            return;
        }
        if ( _name_ == oldChild )
        {
            SetName ((TId) newChild);
            return;
        }
        if ( _equals_ == oldChild )
        {
            SetEquals ((TEquals) newChild);
            return;
        }
        if ( _int_ == oldChild )
        {
            SetInt ((TInt) newChild);
            return;
        }
        if ( _semicolon_ == oldChild )
        {
            SetSemicolon ((TSemicolon) newChild);
            return;
        }
    }

}
public sealed class AFloatDelcareConstantDeclare : PConstantDeclare
{
    private TCon _con_;
    private TId _type_;
    private TId _name_;
    private TEquals _equals_;
    private TFloat _float_;
    private TSemicolon _semicolon_;

    public AFloatDelcareConstantDeclare ()
    {
    }

    public AFloatDelcareConstantDeclare (
            TCon _con_,
            TId _type_,
            TId _name_,
            TEquals _equals_,
            TFloat _float_,
            TSemicolon _semicolon_
    )
    {
        SetCon (_con_);
        SetType (_type_);
        SetName (_name_);
        SetEquals (_equals_);
        SetFloat (_float_);
        SetSemicolon (_semicolon_);
    }

    public override Object Clone()
    {
        return new AFloatDelcareConstantDeclare (
            (TCon)CloneNode (_con_),
            (TId)CloneNode (_type_),
            (TId)CloneNode (_name_),
            (TEquals)CloneNode (_equals_),
            (TFloat)CloneNode (_float_),
            (TSemicolon)CloneNode (_semicolon_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFloatDelcareConstantDeclare(this);
    }

    public TCon GetCon ()
    {
        return _con_;
    }

    public void SetCon (TCon node)
    {
        if(_con_ != null)
        {
            _con_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _con_ = node;
    }
    public TId GetType ()
    {
        return _type_;
    }

    public void SetType (TId node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public TId GetName ()
    {
        return _name_;
    }

    public void SetName (TId node)
    {
        if(_name_ != null)
        {
            _name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _name_ = node;
    }
    public TEquals GetEquals ()
    {
        return _equals_;
    }

    public void SetEquals (TEquals node)
    {
        if(_equals_ != null)
        {
            _equals_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _equals_ = node;
    }
    public TFloat GetFloat ()
    {
        return _float_;
    }

    public void SetFloat (TFloat node)
    {
        if(_float_ != null)
        {
            _float_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _float_ = node;
    }
    public TSemicolon GetSemicolon ()
    {
        return _semicolon_;
    }

    public void SetSemicolon (TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semicolon_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_con_)
            + ToString (_type_)
            + ToString (_name_)
            + ToString (_equals_)
            + ToString (_float_)
            + ToString (_semicolon_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _con_ == child )
        {
            _con_ = null;
            return;
        }
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _name_ == child )
        {
            _name_ = null;
            return;
        }
        if ( _equals_ == child )
        {
            _equals_ = null;
            return;
        }
        if ( _float_ == child )
        {
            _float_ = null;
            return;
        }
        if ( _semicolon_ == child )
        {
            _semicolon_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _con_ == oldChild )
        {
            SetCon ((TCon) newChild);
            return;
        }
        if ( _type_ == oldChild )
        {
            SetType ((TId) newChild);
            return;
        }
        if ( _name_ == oldChild )
        {
            SetName ((TId) newChild);
            return;
        }
        if ( _equals_ == oldChild )
        {
            SetEquals ((TEquals) newChild);
            return;
        }
        if ( _float_ == oldChild )
        {
            SetFloat ((TFloat) newChild);
            return;
        }
        if ( _semicolon_ == oldChild )
        {
            SetSemicolon ((TSemicolon) newChild);
            return;
        }
    }

}
public sealed class AArrayDeclare : PArrayDeclare
{
    private TId _type_;
    private TId _name_;
    private TOpenBracket _open_bracket_;
    private TInt _int_;
    private TCloseBracket _close_bracket_;
    private TSemicolon _semicolon_;

    public AArrayDeclare ()
    {
    }

    public AArrayDeclare (
            TId _type_,
            TId _name_,
            TOpenBracket _open_bracket_,
            TInt _int_,
            TCloseBracket _close_bracket_,
            TSemicolon _semicolon_
    )
    {
        SetType (_type_);
        SetName (_name_);
        SetOpenBracket (_open_bracket_);
        SetInt (_int_);
        SetCloseBracket (_close_bracket_);
        SetSemicolon (_semicolon_);
    }

    public override Object Clone()
    {
        return new AArrayDeclare (
            (TId)CloneNode (_type_),
            (TId)CloneNode (_name_),
            (TOpenBracket)CloneNode (_open_bracket_),
            (TInt)CloneNode (_int_),
            (TCloseBracket)CloneNode (_close_bracket_),
            (TSemicolon)CloneNode (_semicolon_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAArrayDeclare(this);
    }

    public TId GetType ()
    {
        return _type_;
    }

    public void SetType (TId node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public TId GetName ()
    {
        return _name_;
    }

    public void SetName (TId node)
    {
        if(_name_ != null)
        {
            _name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _name_ = node;
    }
    public TOpenBracket GetOpenBracket ()
    {
        return _open_bracket_;
    }

    public void SetOpenBracket (TOpenBracket node)
    {
        if(_open_bracket_ != null)
        {
            _open_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_bracket_ = node;
    }
    public TInt GetInt ()
    {
        return _int_;
    }

    public void SetInt (TInt node)
    {
        if(_int_ != null)
        {
            _int_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _int_ = node;
    }
    public TCloseBracket GetCloseBracket ()
    {
        return _close_bracket_;
    }

    public void SetCloseBracket (TCloseBracket node)
    {
        if(_close_bracket_ != null)
        {
            _close_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _close_bracket_ = node;
    }
    public TSemicolon GetSemicolon ()
    {
        return _semicolon_;
    }

    public void SetSemicolon (TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semicolon_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_type_)
            + ToString (_name_)
            + ToString (_open_bracket_)
            + ToString (_int_)
            + ToString (_close_bracket_)
            + ToString (_semicolon_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _name_ == child )
        {
            _name_ = null;
            return;
        }
        if ( _open_bracket_ == child )
        {
            _open_bracket_ = null;
            return;
        }
        if ( _int_ == child )
        {
            _int_ = null;
            return;
        }
        if ( _close_bracket_ == child )
        {
            _close_bracket_ = null;
            return;
        }
        if ( _semicolon_ == child )
        {
            _semicolon_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _type_ == oldChild )
        {
            SetType ((TId) newChild);
            return;
        }
        if ( _name_ == oldChild )
        {
            SetName ((TId) newChild);
            return;
        }
        if ( _open_bracket_ == oldChild )
        {
            SetOpenBracket ((TOpenBracket) newChild);
            return;
        }
        if ( _int_ == oldChild )
        {
            SetInt ((TInt) newChild);
            return;
        }
        if ( _close_bracket_ == oldChild )
        {
            SetCloseBracket ((TCloseBracket) newChild);
            return;
        }
        if ( _semicolon_ == oldChild )
        {
            SetSemicolon ((TSemicolon) newChild);
            return;
        }
    }

}
public sealed class AIfStatement : PIfStatement
{
    private TIf _if_;
    private TOpenParenthesis _open_parenthesis_;
    private PExp _exp_;
    private TCloseParenthesis _close_parenthesis_;
    private TOpenBrace _open_brace_;
    private PList _list_;
    private TCloseBrace _close_brace_;

    public AIfStatement ()
    {
    }

    public AIfStatement (
            TIf _if_,
            TOpenParenthesis _open_parenthesis_,
            PExp _exp_,
            TCloseParenthesis _close_parenthesis_,
            TOpenBrace _open_brace_,
            PList _list_,
            TCloseBrace _close_brace_
    )
    {
        SetIf (_if_);
        SetOpenParenthesis (_open_parenthesis_);
        SetExp (_exp_);
        SetCloseParenthesis (_close_parenthesis_);
        SetOpenBrace (_open_brace_);
        SetList (_list_);
        SetCloseBrace (_close_brace_);
    }

    public override Object Clone()
    {
        return new AIfStatement (
            (TIf)CloneNode (_if_),
            (TOpenParenthesis)CloneNode (_open_parenthesis_),
            (PExp)CloneNode (_exp_),
            (TCloseParenthesis)CloneNode (_close_parenthesis_),
            (TOpenBrace)CloneNode (_open_brace_),
            (PList)CloneNode (_list_),
            (TCloseBrace)CloneNode (_close_brace_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIfStatement(this);
    }

    public TIf GetIf ()
    {
        return _if_;
    }

    public void SetIf (TIf node)
    {
        if(_if_ != null)
        {
            _if_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _if_ = node;
    }
    public TOpenParenthesis GetOpenParenthesis ()
    {
        return _open_parenthesis_;
    }

    public void SetOpenParenthesis (TOpenParenthesis node)
    {
        if(_open_parenthesis_ != null)
        {
            _open_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_parenthesis_ = node;
    }
    public PExp GetExp ()
    {
        return _exp_;
    }

    public void SetExp (PExp node)
    {
        if(_exp_ != null)
        {
            _exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp_ = node;
    }
    public TCloseParenthesis GetCloseParenthesis ()
    {
        return _close_parenthesis_;
    }

    public void SetCloseParenthesis (TCloseParenthesis node)
    {
        if(_close_parenthesis_ != null)
        {
            _close_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _close_parenthesis_ = node;
    }
    public TOpenBrace GetOpenBrace ()
    {
        return _open_brace_;
    }

    public void SetOpenBrace (TOpenBrace node)
    {
        if(_open_brace_ != null)
        {
            _open_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_brace_ = node;
    }
    public PList GetList ()
    {
        return _list_;
    }

    public void SetList (PList node)
    {
        if(_list_ != null)
        {
            _list_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _list_ = node;
    }
    public TCloseBrace GetCloseBrace ()
    {
        return _close_brace_;
    }

    public void SetCloseBrace (TCloseBrace node)
    {
        if(_close_brace_ != null)
        {
            _close_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _close_brace_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_if_)
            + ToString (_open_parenthesis_)
            + ToString (_exp_)
            + ToString (_close_parenthesis_)
            + ToString (_open_brace_)
            + ToString (_list_)
            + ToString (_close_brace_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _if_ == child )
        {
            _if_ = null;
            return;
        }
        if ( _open_parenthesis_ == child )
        {
            _open_parenthesis_ = null;
            return;
        }
        if ( _exp_ == child )
        {
            _exp_ = null;
            return;
        }
        if ( _close_parenthesis_ == child )
        {
            _close_parenthesis_ = null;
            return;
        }
        if ( _open_brace_ == child )
        {
            _open_brace_ = null;
            return;
        }
        if ( _list_ == child )
        {
            _list_ = null;
            return;
        }
        if ( _close_brace_ == child )
        {
            _close_brace_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _if_ == oldChild )
        {
            SetIf ((TIf) newChild);
            return;
        }
        if ( _open_parenthesis_ == oldChild )
        {
            SetOpenParenthesis ((TOpenParenthesis) newChild);
            return;
        }
        if ( _exp_ == oldChild )
        {
            SetExp ((PExp) newChild);
            return;
        }
        if ( _close_parenthesis_ == oldChild )
        {
            SetCloseParenthesis ((TCloseParenthesis) newChild);
            return;
        }
        if ( _open_brace_ == oldChild )
        {
            SetOpenBrace ((TOpenBrace) newChild);
            return;
        }
        if ( _list_ == oldChild )
        {
            SetList ((PList) newChild);
            return;
        }
        if ( _close_brace_ == oldChild )
        {
            SetCloseBrace ((TCloseBrace) newChild);
            return;
        }
    }

}
public sealed class AWhileLoop : PWhileLoop
{
    private TWhile _while_;
    private TOpenParenthesis _open_parenthesis_;
    private PExp _exp_;
    private TCloseParenthesis _close_parenthesis_;
    private TOpenBrace _open_brace_;
    private PList _list_;
    private TCloseBrace _close_brace_;

    public AWhileLoop ()
    {
    }

    public AWhileLoop (
            TWhile _while_,
            TOpenParenthesis _open_parenthesis_,
            PExp _exp_,
            TCloseParenthesis _close_parenthesis_,
            TOpenBrace _open_brace_,
            PList _list_,
            TCloseBrace _close_brace_
    )
    {
        SetWhile (_while_);
        SetOpenParenthesis (_open_parenthesis_);
        SetExp (_exp_);
        SetCloseParenthesis (_close_parenthesis_);
        SetOpenBrace (_open_brace_);
        SetList (_list_);
        SetCloseBrace (_close_brace_);
    }

    public override Object Clone()
    {
        return new AWhileLoop (
            (TWhile)CloneNode (_while_),
            (TOpenParenthesis)CloneNode (_open_parenthesis_),
            (PExp)CloneNode (_exp_),
            (TCloseParenthesis)CloneNode (_close_parenthesis_),
            (TOpenBrace)CloneNode (_open_brace_),
            (PList)CloneNode (_list_),
            (TCloseBrace)CloneNode (_close_brace_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAWhileLoop(this);
    }

    public TWhile GetWhile ()
    {
        return _while_;
    }

    public void SetWhile (TWhile node)
    {
        if(_while_ != null)
        {
            _while_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _while_ = node;
    }
    public TOpenParenthesis GetOpenParenthesis ()
    {
        return _open_parenthesis_;
    }

    public void SetOpenParenthesis (TOpenParenthesis node)
    {
        if(_open_parenthesis_ != null)
        {
            _open_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_parenthesis_ = node;
    }
    public PExp GetExp ()
    {
        return _exp_;
    }

    public void SetExp (PExp node)
    {
        if(_exp_ != null)
        {
            _exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp_ = node;
    }
    public TCloseParenthesis GetCloseParenthesis ()
    {
        return _close_parenthesis_;
    }

    public void SetCloseParenthesis (TCloseParenthesis node)
    {
        if(_close_parenthesis_ != null)
        {
            _close_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _close_parenthesis_ = node;
    }
    public TOpenBrace GetOpenBrace ()
    {
        return _open_brace_;
    }

    public void SetOpenBrace (TOpenBrace node)
    {
        if(_open_brace_ != null)
        {
            _open_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_brace_ = node;
    }
    public PList GetList ()
    {
        return _list_;
    }

    public void SetList (PList node)
    {
        if(_list_ != null)
        {
            _list_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _list_ = node;
    }
    public TCloseBrace GetCloseBrace ()
    {
        return _close_brace_;
    }

    public void SetCloseBrace (TCloseBrace node)
    {
        if(_close_brace_ != null)
        {
            _close_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _close_brace_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_while_)
            + ToString (_open_parenthesis_)
            + ToString (_exp_)
            + ToString (_close_parenthesis_)
            + ToString (_open_brace_)
            + ToString (_list_)
            + ToString (_close_brace_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _while_ == child )
        {
            _while_ = null;
            return;
        }
        if ( _open_parenthesis_ == child )
        {
            _open_parenthesis_ = null;
            return;
        }
        if ( _exp_ == child )
        {
            _exp_ = null;
            return;
        }
        if ( _close_parenthesis_ == child )
        {
            _close_parenthesis_ = null;
            return;
        }
        if ( _open_brace_ == child )
        {
            _open_brace_ = null;
            return;
        }
        if ( _list_ == child )
        {
            _list_ = null;
            return;
        }
        if ( _close_brace_ == child )
        {
            _close_brace_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _while_ == oldChild )
        {
            SetWhile ((TWhile) newChild);
            return;
        }
        if ( _open_parenthesis_ == oldChild )
        {
            SetOpenParenthesis ((TOpenParenthesis) newChild);
            return;
        }
        if ( _exp_ == oldChild )
        {
            SetExp ((PExp) newChild);
            return;
        }
        if ( _close_parenthesis_ == oldChild )
        {
            SetCloseParenthesis ((TCloseParenthesis) newChild);
            return;
        }
        if ( _open_brace_ == oldChild )
        {
            SetOpenBrace ((TOpenBrace) newChild);
            return;
        }
        if ( _list_ == oldChild )
        {
            SetList ((PList) newChild);
            return;
        }
        if ( _close_brace_ == oldChild )
        {
            SetCloseBrace ((TCloseBrace) newChild);
            return;
        }
    }

}
public sealed class AExpressionAssignStatement : PAssignStatement
{
    private TId _id_;
    private TEquals _equals_;
    private PExp _exp_;
    private TSemicolon _semicolon_;

    public AExpressionAssignStatement ()
    {
    }

    public AExpressionAssignStatement (
            TId _id_,
            TEquals _equals_,
            PExp _exp_,
            TSemicolon _semicolon_
    )
    {
        SetId (_id_);
        SetEquals (_equals_);
        SetExp (_exp_);
        SetSemicolon (_semicolon_);
    }

    public override Object Clone()
    {
        return new AExpressionAssignStatement (
            (TId)CloneNode (_id_),
            (TEquals)CloneNode (_equals_),
            (PExp)CloneNode (_exp_),
            (TSemicolon)CloneNode (_semicolon_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAExpressionAssignStatement(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TEquals GetEquals ()
    {
        return _equals_;
    }

    public void SetEquals (TEquals node)
    {
        if(_equals_ != null)
        {
            _equals_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _equals_ = node;
    }
    public PExp GetExp ()
    {
        return _exp_;
    }

    public void SetExp (PExp node)
    {
        if(_exp_ != null)
        {
            _exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp_ = node;
    }
    public TSemicolon GetSemicolon ()
    {
        return _semicolon_;
    }

    public void SetSemicolon (TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semicolon_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_equals_)
            + ToString (_exp_)
            + ToString (_semicolon_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _equals_ == child )
        {
            _equals_ = null;
            return;
        }
        if ( _exp_ == child )
        {
            _exp_ = null;
            return;
        }
        if ( _semicolon_ == child )
        {
            _semicolon_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _equals_ == oldChild )
        {
            SetEquals ((TEquals) newChild);
            return;
        }
        if ( _exp_ == oldChild )
        {
            SetExp ((PExp) newChild);
            return;
        }
        if ( _semicolon_ == oldChild )
        {
            SetSemicolon ((TSemicolon) newChild);
            return;
        }
    }

}
public sealed class AArrayAssignStatement : PAssignStatement
{
    private TId _id_;
    private TOpenBracket _open_bracket_;
    private PExp _in_bracket_;
    private TCloseBracket _close_bracket_;
    private TEquals _equals_;
    private PExp _equalto_;
    private TSemicolon _semicolon_;

    public AArrayAssignStatement ()
    {
    }

    public AArrayAssignStatement (
            TId _id_,
            TOpenBracket _open_bracket_,
            PExp _in_bracket_,
            TCloseBracket _close_bracket_,
            TEquals _equals_,
            PExp _equalto_,
            TSemicolon _semicolon_
    )
    {
        SetId (_id_);
        SetOpenBracket (_open_bracket_);
        SetInBracket (_in_bracket_);
        SetCloseBracket (_close_bracket_);
        SetEquals (_equals_);
        SetEqualto (_equalto_);
        SetSemicolon (_semicolon_);
    }

    public override Object Clone()
    {
        return new AArrayAssignStatement (
            (TId)CloneNode (_id_),
            (TOpenBracket)CloneNode (_open_bracket_),
            (PExp)CloneNode (_in_bracket_),
            (TCloseBracket)CloneNode (_close_bracket_),
            (TEquals)CloneNode (_equals_),
            (PExp)CloneNode (_equalto_),
            (TSemicolon)CloneNode (_semicolon_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAArrayAssignStatement(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TOpenBracket GetOpenBracket ()
    {
        return _open_bracket_;
    }

    public void SetOpenBracket (TOpenBracket node)
    {
        if(_open_bracket_ != null)
        {
            _open_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_bracket_ = node;
    }
    public PExp GetInBracket ()
    {
        return _in_bracket_;
    }

    public void SetInBracket (PExp node)
    {
        if(_in_bracket_ != null)
        {
            _in_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _in_bracket_ = node;
    }
    public TCloseBracket GetCloseBracket ()
    {
        return _close_bracket_;
    }

    public void SetCloseBracket (TCloseBracket node)
    {
        if(_close_bracket_ != null)
        {
            _close_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _close_bracket_ = node;
    }
    public TEquals GetEquals ()
    {
        return _equals_;
    }

    public void SetEquals (TEquals node)
    {
        if(_equals_ != null)
        {
            _equals_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _equals_ = node;
    }
    public PExp GetEqualto ()
    {
        return _equalto_;
    }

    public void SetEqualto (PExp node)
    {
        if(_equalto_ != null)
        {
            _equalto_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _equalto_ = node;
    }
    public TSemicolon GetSemicolon ()
    {
        return _semicolon_;
    }

    public void SetSemicolon (TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semicolon_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_open_bracket_)
            + ToString (_in_bracket_)
            + ToString (_close_bracket_)
            + ToString (_equals_)
            + ToString (_equalto_)
            + ToString (_semicolon_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _open_bracket_ == child )
        {
            _open_bracket_ = null;
            return;
        }
        if ( _in_bracket_ == child )
        {
            _in_bracket_ = null;
            return;
        }
        if ( _close_bracket_ == child )
        {
            _close_bracket_ = null;
            return;
        }
        if ( _equals_ == child )
        {
            _equals_ = null;
            return;
        }
        if ( _equalto_ == child )
        {
            _equalto_ = null;
            return;
        }
        if ( _semicolon_ == child )
        {
            _semicolon_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _open_bracket_ == oldChild )
        {
            SetOpenBracket ((TOpenBracket) newChild);
            return;
        }
        if ( _in_bracket_ == oldChild )
        {
            SetInBracket ((PExp) newChild);
            return;
        }
        if ( _close_bracket_ == oldChild )
        {
            SetCloseBracket ((TCloseBracket) newChild);
            return;
        }
        if ( _equals_ == oldChild )
        {
            SetEquals ((TEquals) newChild);
            return;
        }
        if ( _equalto_ == oldChild )
        {
            SetEqualto ((PExp) newChild);
            return;
        }
        if ( _semicolon_ == oldChild )
        {
            SetSemicolon ((TSemicolon) newChild);
            return;
        }
    }

}
public sealed class AStartExp : PExp
{
    private PExp _exp_;
    private TOr _or_;
    private PComparators _comparators_;

    public AStartExp ()
    {
    }

    public AStartExp (
            PExp _exp_,
            TOr _or_,
            PComparators _comparators_
    )
    {
        SetExp (_exp_);
        SetOr (_or_);
        SetComparators (_comparators_);
    }

    public override Object Clone()
    {
        return new AStartExp (
            (PExp)CloneNode (_exp_),
            (TOr)CloneNode (_or_),
            (PComparators)CloneNode (_comparators_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAStartExp(this);
    }

    public PExp GetExp ()
    {
        return _exp_;
    }

    public void SetExp (PExp node)
    {
        if(_exp_ != null)
        {
            _exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp_ = node;
    }
    public TOr GetOr ()
    {
        return _or_;
    }

    public void SetOr (TOr node)
    {
        if(_or_ != null)
        {
            _or_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _or_ = node;
    }
    public PComparators GetComparators ()
    {
        return _comparators_;
    }

    public void SetComparators (PComparators node)
    {
        if(_comparators_ != null)
        {
            _comparators_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comparators_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_exp_)
            + ToString (_or_)
            + ToString (_comparators_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _exp_ == child )
        {
            _exp_ = null;
            return;
        }
        if ( _or_ == child )
        {
            _or_ = null;
            return;
        }
        if ( _comparators_ == child )
        {
            _comparators_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _exp_ == oldChild )
        {
            SetExp ((PExp) newChild);
            return;
        }
        if ( _or_ == oldChild )
        {
            SetOr ((TOr) newChild);
            return;
        }
        if ( _comparators_ == oldChild )
        {
            SetComparators ((PComparators) newChild);
            return;
        }
    }

}
public sealed class AAndExp : PExp
{
    private PExp _exp_;
    private TAnd _and_;
    private PComparators _comparators_;

    public AAndExp ()
    {
    }

    public AAndExp (
            PExp _exp_,
            TAnd _and_,
            PComparators _comparators_
    )
    {
        SetExp (_exp_);
        SetAnd (_and_);
        SetComparators (_comparators_);
    }

    public override Object Clone()
    {
        return new AAndExp (
            (PExp)CloneNode (_exp_),
            (TAnd)CloneNode (_and_),
            (PComparators)CloneNode (_comparators_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAndExp(this);
    }

    public PExp GetExp ()
    {
        return _exp_;
    }

    public void SetExp (PExp node)
    {
        if(_exp_ != null)
        {
            _exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp_ = node;
    }
    public TAnd GetAnd ()
    {
        return _and_;
    }

    public void SetAnd (TAnd node)
    {
        if(_and_ != null)
        {
            _and_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _and_ = node;
    }
    public PComparators GetComparators ()
    {
        return _comparators_;
    }

    public void SetComparators (PComparators node)
    {
        if(_comparators_ != null)
        {
            _comparators_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comparators_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_exp_)
            + ToString (_and_)
            + ToString (_comparators_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _exp_ == child )
        {
            _exp_ = null;
            return;
        }
        if ( _and_ == child )
        {
            _and_ = null;
            return;
        }
        if ( _comparators_ == child )
        {
            _comparators_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _exp_ == oldChild )
        {
            SetExp ((PExp) newChild);
            return;
        }
        if ( _and_ == oldChild )
        {
            SetAnd ((TAnd) newChild);
            return;
        }
        if ( _comparators_ == oldChild )
        {
            SetComparators ((PComparators) newChild);
            return;
        }
    }

}
public sealed class ANotEqualExp : PExp
{
    private PExp _exp_;
    private TNotEqual _not_equal_;
    private PComparators _comparators_;

    public ANotEqualExp ()
    {
    }

    public ANotEqualExp (
            PExp _exp_,
            TNotEqual _not_equal_,
            PComparators _comparators_
    )
    {
        SetExp (_exp_);
        SetNotEqual (_not_equal_);
        SetComparators (_comparators_);
    }

    public override Object Clone()
    {
        return new ANotEqualExp (
            (PExp)CloneNode (_exp_),
            (TNotEqual)CloneNode (_not_equal_),
            (PComparators)CloneNode (_comparators_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANotEqualExp(this);
    }

    public PExp GetExp ()
    {
        return _exp_;
    }

    public void SetExp (PExp node)
    {
        if(_exp_ != null)
        {
            _exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp_ = node;
    }
    public TNotEqual GetNotEqual ()
    {
        return _not_equal_;
    }

    public void SetNotEqual (TNotEqual node)
    {
        if(_not_equal_ != null)
        {
            _not_equal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _not_equal_ = node;
    }
    public PComparators GetComparators ()
    {
        return _comparators_;
    }

    public void SetComparators (PComparators node)
    {
        if(_comparators_ != null)
        {
            _comparators_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comparators_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_exp_)
            + ToString (_not_equal_)
            + ToString (_comparators_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _exp_ == child )
        {
            _exp_ = null;
            return;
        }
        if ( _not_equal_ == child )
        {
            _not_equal_ = null;
            return;
        }
        if ( _comparators_ == child )
        {
            _comparators_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _exp_ == oldChild )
        {
            SetExp ((PExp) newChild);
            return;
        }
        if ( _not_equal_ == oldChild )
        {
            SetNotEqual ((TNotEqual) newChild);
            return;
        }
        if ( _comparators_ == oldChild )
        {
            SetComparators ((PComparators) newChild);
            return;
        }
    }

}
public sealed class AEqualToExp : PExp
{
    private PExp _exp_;
    private TEqualTo _equal_to_;
    private PComparators _comparators_;

    public AEqualToExp ()
    {
    }

    public AEqualToExp (
            PExp _exp_,
            TEqualTo _equal_to_,
            PComparators _comparators_
    )
    {
        SetExp (_exp_);
        SetEqualTo (_equal_to_);
        SetComparators (_comparators_);
    }

    public override Object Clone()
    {
        return new AEqualToExp (
            (PExp)CloneNode (_exp_),
            (TEqualTo)CloneNode (_equal_to_),
            (PComparators)CloneNode (_comparators_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAEqualToExp(this);
    }

    public PExp GetExp ()
    {
        return _exp_;
    }

    public void SetExp (PExp node)
    {
        if(_exp_ != null)
        {
            _exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp_ = node;
    }
    public TEqualTo GetEqualTo ()
    {
        return _equal_to_;
    }

    public void SetEqualTo (TEqualTo node)
    {
        if(_equal_to_ != null)
        {
            _equal_to_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _equal_to_ = node;
    }
    public PComparators GetComparators ()
    {
        return _comparators_;
    }

    public void SetComparators (PComparators node)
    {
        if(_comparators_ != null)
        {
            _comparators_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comparators_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_exp_)
            + ToString (_equal_to_)
            + ToString (_comparators_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _exp_ == child )
        {
            _exp_ = null;
            return;
        }
        if ( _equal_to_ == child )
        {
            _equal_to_ = null;
            return;
        }
        if ( _comparators_ == child )
        {
            _comparators_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _exp_ == oldChild )
        {
            SetExp ((PExp) newChild);
            return;
        }
        if ( _equal_to_ == oldChild )
        {
            SetEqualTo ((TEqualTo) newChild);
            return;
        }
        if ( _comparators_ == oldChild )
        {
            SetComparators ((PComparators) newChild);
            return;
        }
    }

}
public sealed class ANextExp : PExp
{
    private PComparators _comparators_;

    public ANextExp ()
    {
    }

    public ANextExp (
            PComparators _comparators_
    )
    {
        SetComparators (_comparators_);
    }

    public override Object Clone()
    {
        return new ANextExp (
            (PComparators)CloneNode (_comparators_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANextExp(this);
    }

    public PComparators GetComparators ()
    {
        return _comparators_;
    }

    public void SetComparators (PComparators node)
    {
        if(_comparators_ != null)
        {
            _comparators_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comparators_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_comparators_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _comparators_ == child )
        {
            _comparators_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _comparators_ == oldChild )
        {
            SetComparators ((PComparators) newChild);
            return;
        }
    }

}
public sealed class AGreaterThanComparators : PComparators
{
    private PMath1 _one_;
    private TGreaterThan _greater_than_;
    private PMath1 _two_;

    public AGreaterThanComparators ()
    {
    }

    public AGreaterThanComparators (
            PMath1 _one_,
            TGreaterThan _greater_than_,
            PMath1 _two_
    )
    {
        SetOne (_one_);
        SetGreaterThan (_greater_than_);
        SetTwo (_two_);
    }

    public override Object Clone()
    {
        return new AGreaterThanComparators (
            (PMath1)CloneNode (_one_),
            (TGreaterThan)CloneNode (_greater_than_),
            (PMath1)CloneNode (_two_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGreaterThanComparators(this);
    }

    public PMath1 GetOne ()
    {
        return _one_;
    }

    public void SetOne (PMath1 node)
    {
        if(_one_ != null)
        {
            _one_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _one_ = node;
    }
    public TGreaterThan GetGreaterThan ()
    {
        return _greater_than_;
    }

    public void SetGreaterThan (TGreaterThan node)
    {
        if(_greater_than_ != null)
        {
            _greater_than_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _greater_than_ = node;
    }
    public PMath1 GetTwo ()
    {
        return _two_;
    }

    public void SetTwo (PMath1 node)
    {
        if(_two_ != null)
        {
            _two_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _two_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_one_)
            + ToString (_greater_than_)
            + ToString (_two_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _one_ == child )
        {
            _one_ = null;
            return;
        }
        if ( _greater_than_ == child )
        {
            _greater_than_ = null;
            return;
        }
        if ( _two_ == child )
        {
            _two_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _one_ == oldChild )
        {
            SetOne ((PMath1) newChild);
            return;
        }
        if ( _greater_than_ == oldChild )
        {
            SetGreaterThan ((TGreaterThan) newChild);
            return;
        }
        if ( _two_ == oldChild )
        {
            SetTwo ((PMath1) newChild);
            return;
        }
    }

}
public sealed class ALessThanComparators : PComparators
{
    private PMath1 _one_;
    private TLessThan _less_than_;
    private PMath1 _two_;

    public ALessThanComparators ()
    {
    }

    public ALessThanComparators (
            PMath1 _one_,
            TLessThan _less_than_,
            PMath1 _two_
    )
    {
        SetOne (_one_);
        SetLessThan (_less_than_);
        SetTwo (_two_);
    }

    public override Object Clone()
    {
        return new ALessThanComparators (
            (PMath1)CloneNode (_one_),
            (TLessThan)CloneNode (_less_than_),
            (PMath1)CloneNode (_two_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALessThanComparators(this);
    }

    public PMath1 GetOne ()
    {
        return _one_;
    }

    public void SetOne (PMath1 node)
    {
        if(_one_ != null)
        {
            _one_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _one_ = node;
    }
    public TLessThan GetLessThan ()
    {
        return _less_than_;
    }

    public void SetLessThan (TLessThan node)
    {
        if(_less_than_ != null)
        {
            _less_than_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _less_than_ = node;
    }
    public PMath1 GetTwo ()
    {
        return _two_;
    }

    public void SetTwo (PMath1 node)
    {
        if(_two_ != null)
        {
            _two_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _two_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_one_)
            + ToString (_less_than_)
            + ToString (_two_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _one_ == child )
        {
            _one_ = null;
            return;
        }
        if ( _less_than_ == child )
        {
            _less_than_ = null;
            return;
        }
        if ( _two_ == child )
        {
            _two_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _one_ == oldChild )
        {
            SetOne ((PMath1) newChild);
            return;
        }
        if ( _less_than_ == oldChild )
        {
            SetLessThan ((TLessThan) newChild);
            return;
        }
        if ( _two_ == oldChild )
        {
            SetTwo ((PMath1) newChild);
            return;
        }
    }

}
public sealed class AGreaterEqualComparators : PComparators
{
    private PMath1 _one_;
    private TGreaterEqual _greater_equal_;
    private PMath1 _two_;

    public AGreaterEqualComparators ()
    {
    }

    public AGreaterEqualComparators (
            PMath1 _one_,
            TGreaterEqual _greater_equal_,
            PMath1 _two_
    )
    {
        SetOne (_one_);
        SetGreaterEqual (_greater_equal_);
        SetTwo (_two_);
    }

    public override Object Clone()
    {
        return new AGreaterEqualComparators (
            (PMath1)CloneNode (_one_),
            (TGreaterEqual)CloneNode (_greater_equal_),
            (PMath1)CloneNode (_two_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGreaterEqualComparators(this);
    }

    public PMath1 GetOne ()
    {
        return _one_;
    }

    public void SetOne (PMath1 node)
    {
        if(_one_ != null)
        {
            _one_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _one_ = node;
    }
    public TGreaterEqual GetGreaterEqual ()
    {
        return _greater_equal_;
    }

    public void SetGreaterEqual (TGreaterEqual node)
    {
        if(_greater_equal_ != null)
        {
            _greater_equal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _greater_equal_ = node;
    }
    public PMath1 GetTwo ()
    {
        return _two_;
    }

    public void SetTwo (PMath1 node)
    {
        if(_two_ != null)
        {
            _two_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _two_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_one_)
            + ToString (_greater_equal_)
            + ToString (_two_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _one_ == child )
        {
            _one_ = null;
            return;
        }
        if ( _greater_equal_ == child )
        {
            _greater_equal_ = null;
            return;
        }
        if ( _two_ == child )
        {
            _two_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _one_ == oldChild )
        {
            SetOne ((PMath1) newChild);
            return;
        }
        if ( _greater_equal_ == oldChild )
        {
            SetGreaterEqual ((TGreaterEqual) newChild);
            return;
        }
        if ( _two_ == oldChild )
        {
            SetTwo ((PMath1) newChild);
            return;
        }
    }

}
public sealed class ALessEqualComparators : PComparators
{
    private PMath1 _one_;
    private TLessEqual _less_equal_;
    private PMath1 _two_;

    public ALessEqualComparators ()
    {
    }

    public ALessEqualComparators (
            PMath1 _one_,
            TLessEqual _less_equal_,
            PMath1 _two_
    )
    {
        SetOne (_one_);
        SetLessEqual (_less_equal_);
        SetTwo (_two_);
    }

    public override Object Clone()
    {
        return new ALessEqualComparators (
            (PMath1)CloneNode (_one_),
            (TLessEqual)CloneNode (_less_equal_),
            (PMath1)CloneNode (_two_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALessEqualComparators(this);
    }

    public PMath1 GetOne ()
    {
        return _one_;
    }

    public void SetOne (PMath1 node)
    {
        if(_one_ != null)
        {
            _one_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _one_ = node;
    }
    public TLessEqual GetLessEqual ()
    {
        return _less_equal_;
    }

    public void SetLessEqual (TLessEqual node)
    {
        if(_less_equal_ != null)
        {
            _less_equal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _less_equal_ = node;
    }
    public PMath1 GetTwo ()
    {
        return _two_;
    }

    public void SetTwo (PMath1 node)
    {
        if(_two_ != null)
        {
            _two_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _two_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_one_)
            + ToString (_less_equal_)
            + ToString (_two_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _one_ == child )
        {
            _one_ = null;
            return;
        }
        if ( _less_equal_ == child )
        {
            _less_equal_ = null;
            return;
        }
        if ( _two_ == child )
        {
            _two_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _one_ == oldChild )
        {
            SetOne ((PMath1) newChild);
            return;
        }
        if ( _less_equal_ == oldChild )
        {
            SetLessEqual ((TLessEqual) newChild);
            return;
        }
        if ( _two_ == oldChild )
        {
            SetTwo ((PMath1) newChild);
            return;
        }
    }

}
public sealed class ANextComparators : PComparators
{
    private PMath1 _math1_;

    public ANextComparators ()
    {
    }

    public ANextComparators (
            PMath1 _math1_
    )
    {
        SetMath1 (_math1_);
    }

    public override Object Clone()
    {
        return new ANextComparators (
            (PMath1)CloneNode (_math1_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANextComparators(this);
    }

    public PMath1 GetMath1 ()
    {
        return _math1_;
    }

    public void SetMath1 (PMath1 node)
    {
        if(_math1_ != null)
        {
            _math1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _math1_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_math1_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _math1_ == child )
        {
            _math1_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _math1_ == oldChild )
        {
            SetMath1 ((PMath1) newChild);
            return;
        }
    }

}
public sealed class ASubtractMath1 : PMath1
{
    private PMath1 _math1_;
    private TMinus _minus_;
    private PMath2 _math2_;

    public ASubtractMath1 ()
    {
    }

    public ASubtractMath1 (
            PMath1 _math1_,
            TMinus _minus_,
            PMath2 _math2_
    )
    {
        SetMath1 (_math1_);
        SetMinus (_minus_);
        SetMath2 (_math2_);
    }

    public override Object Clone()
    {
        return new ASubtractMath1 (
            (PMath1)CloneNode (_math1_),
            (TMinus)CloneNode (_minus_),
            (PMath2)CloneNode (_math2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASubtractMath1(this);
    }

    public PMath1 GetMath1 ()
    {
        return _math1_;
    }

    public void SetMath1 (PMath1 node)
    {
        if(_math1_ != null)
        {
            _math1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _math1_ = node;
    }
    public TMinus GetMinus ()
    {
        return _minus_;
    }

    public void SetMinus (TMinus node)
    {
        if(_minus_ != null)
        {
            _minus_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _minus_ = node;
    }
    public PMath2 GetMath2 ()
    {
        return _math2_;
    }

    public void SetMath2 (PMath2 node)
    {
        if(_math2_ != null)
        {
            _math2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _math2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_math1_)
            + ToString (_minus_)
            + ToString (_math2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _math1_ == child )
        {
            _math1_ = null;
            return;
        }
        if ( _minus_ == child )
        {
            _minus_ = null;
            return;
        }
        if ( _math2_ == child )
        {
            _math2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _math1_ == oldChild )
        {
            SetMath1 ((PMath1) newChild);
            return;
        }
        if ( _minus_ == oldChild )
        {
            SetMinus ((TMinus) newChild);
            return;
        }
        if ( _math2_ == oldChild )
        {
            SetMath2 ((PMath2) newChild);
            return;
        }
    }

}
public sealed class AAddMath1 : PMath1
{
    private PMath1 _math1_;
    private TPlus _plus_;
    private PMath2 _math2_;

    public AAddMath1 ()
    {
    }

    public AAddMath1 (
            PMath1 _math1_,
            TPlus _plus_,
            PMath2 _math2_
    )
    {
        SetMath1 (_math1_);
        SetPlus (_plus_);
        SetMath2 (_math2_);
    }

    public override Object Clone()
    {
        return new AAddMath1 (
            (PMath1)CloneNode (_math1_),
            (TPlus)CloneNode (_plus_),
            (PMath2)CloneNode (_math2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAddMath1(this);
    }

    public PMath1 GetMath1 ()
    {
        return _math1_;
    }

    public void SetMath1 (PMath1 node)
    {
        if(_math1_ != null)
        {
            _math1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _math1_ = node;
    }
    public TPlus GetPlus ()
    {
        return _plus_;
    }

    public void SetPlus (TPlus node)
    {
        if(_plus_ != null)
        {
            _plus_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _plus_ = node;
    }
    public PMath2 GetMath2 ()
    {
        return _math2_;
    }

    public void SetMath2 (PMath2 node)
    {
        if(_math2_ != null)
        {
            _math2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _math2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_math1_)
            + ToString (_plus_)
            + ToString (_math2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _math1_ == child )
        {
            _math1_ = null;
            return;
        }
        if ( _plus_ == child )
        {
            _plus_ = null;
            return;
        }
        if ( _math2_ == child )
        {
            _math2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _math1_ == oldChild )
        {
            SetMath1 ((PMath1) newChild);
            return;
        }
        if ( _plus_ == oldChild )
        {
            SetPlus ((TPlus) newChild);
            return;
        }
        if ( _math2_ == oldChild )
        {
            SetMath2 ((PMath2) newChild);
            return;
        }
    }

}
public sealed class ANextMath1 : PMath1
{
    private PMath2 _math2_;

    public ANextMath1 ()
    {
    }

    public ANextMath1 (
            PMath2 _math2_
    )
    {
        SetMath2 (_math2_);
    }

    public override Object Clone()
    {
        return new ANextMath1 (
            (PMath2)CloneNode (_math2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANextMath1(this);
    }

    public PMath2 GetMath2 ()
    {
        return _math2_;
    }

    public void SetMath2 (PMath2 node)
    {
        if(_math2_ != null)
        {
            _math2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _math2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_math2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _math2_ == child )
        {
            _math2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _math2_ == oldChild )
        {
            SetMath2 ((PMath2) newChild);
            return;
        }
    }

}
public sealed class ADivideMath2 : PMath2
{
    private PMath2 _math2_;
    private TDivide _divide_;
    private PEndExp _end_exp_;

    public ADivideMath2 ()
    {
    }

    public ADivideMath2 (
            PMath2 _math2_,
            TDivide _divide_,
            PEndExp _end_exp_
    )
    {
        SetMath2 (_math2_);
        SetDivide (_divide_);
        SetEndExp (_end_exp_);
    }

    public override Object Clone()
    {
        return new ADivideMath2 (
            (PMath2)CloneNode (_math2_),
            (TDivide)CloneNode (_divide_),
            (PEndExp)CloneNode (_end_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADivideMath2(this);
    }

    public PMath2 GetMath2 ()
    {
        return _math2_;
    }

    public void SetMath2 (PMath2 node)
    {
        if(_math2_ != null)
        {
            _math2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _math2_ = node;
    }
    public TDivide GetDivide ()
    {
        return _divide_;
    }

    public void SetDivide (TDivide node)
    {
        if(_divide_ != null)
        {
            _divide_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _divide_ = node;
    }
    public PEndExp GetEndExp ()
    {
        return _end_exp_;
    }

    public void SetEndExp (PEndExp node)
    {
        if(_end_exp_ != null)
        {
            _end_exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _end_exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_math2_)
            + ToString (_divide_)
            + ToString (_end_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _math2_ == child )
        {
            _math2_ = null;
            return;
        }
        if ( _divide_ == child )
        {
            _divide_ = null;
            return;
        }
        if ( _end_exp_ == child )
        {
            _end_exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _math2_ == oldChild )
        {
            SetMath2 ((PMath2) newChild);
            return;
        }
        if ( _divide_ == oldChild )
        {
            SetDivide ((TDivide) newChild);
            return;
        }
        if ( _end_exp_ == oldChild )
        {
            SetEndExp ((PEndExp) newChild);
            return;
        }
    }

}
public sealed class AMultiplyMath2 : PMath2
{
    private PMath2 _math2_;
    private TMultiply _multiply_;
    private PEndExp _end_exp_;

    public AMultiplyMath2 ()
    {
    }

    public AMultiplyMath2 (
            PMath2 _math2_,
            TMultiply _multiply_,
            PEndExp _end_exp_
    )
    {
        SetMath2 (_math2_);
        SetMultiply (_multiply_);
        SetEndExp (_end_exp_);
    }

    public override Object Clone()
    {
        return new AMultiplyMath2 (
            (PMath2)CloneNode (_math2_),
            (TMultiply)CloneNode (_multiply_),
            (PEndExp)CloneNode (_end_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultiplyMath2(this);
    }

    public PMath2 GetMath2 ()
    {
        return _math2_;
    }

    public void SetMath2 (PMath2 node)
    {
        if(_math2_ != null)
        {
            _math2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _math2_ = node;
    }
    public TMultiply GetMultiply ()
    {
        return _multiply_;
    }

    public void SetMultiply (TMultiply node)
    {
        if(_multiply_ != null)
        {
            _multiply_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _multiply_ = node;
    }
    public PEndExp GetEndExp ()
    {
        return _end_exp_;
    }

    public void SetEndExp (PEndExp node)
    {
        if(_end_exp_ != null)
        {
            _end_exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _end_exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_math2_)
            + ToString (_multiply_)
            + ToString (_end_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _math2_ == child )
        {
            _math2_ = null;
            return;
        }
        if ( _multiply_ == child )
        {
            _multiply_ = null;
            return;
        }
        if ( _end_exp_ == child )
        {
            _end_exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _math2_ == oldChild )
        {
            SetMath2 ((PMath2) newChild);
            return;
        }
        if ( _multiply_ == oldChild )
        {
            SetMultiply ((TMultiply) newChild);
            return;
        }
        if ( _end_exp_ == oldChild )
        {
            SetEndExp ((PEndExp) newChild);
            return;
        }
    }

}
public sealed class ANextMath2 : PMath2
{
    private PEndExp _end_exp_;

    public ANextMath2 ()
    {
    }

    public ANextMath2 (
            PEndExp _end_exp_
    )
    {
        SetEndExp (_end_exp_);
    }

    public override Object Clone()
    {
        return new ANextMath2 (
            (PEndExp)CloneNode (_end_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANextMath2(this);
    }

    public PEndExp GetEndExp ()
    {
        return _end_exp_;
    }

    public void SetEndExp (PEndExp node)
    {
        if(_end_exp_ != null)
        {
            _end_exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _end_exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_end_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _end_exp_ == child )
        {
            _end_exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _end_exp_ == oldChild )
        {
            SetEndExp ((PEndExp) newChild);
            return;
        }
    }

}
public sealed class ACallTopEndExp : PEndExp
{
    private TOpenParenthesis _open_parenthesis_;
    private PExp _exp_;
    private TCloseParenthesis _close_parenthesis_;

    public ACallTopEndExp ()
    {
    }

    public ACallTopEndExp (
            TOpenParenthesis _open_parenthesis_,
            PExp _exp_,
            TCloseParenthesis _close_parenthesis_
    )
    {
        SetOpenParenthesis (_open_parenthesis_);
        SetExp (_exp_);
        SetCloseParenthesis (_close_parenthesis_);
    }

    public override Object Clone()
    {
        return new ACallTopEndExp (
            (TOpenParenthesis)CloneNode (_open_parenthesis_),
            (PExp)CloneNode (_exp_),
            (TCloseParenthesis)CloneNode (_close_parenthesis_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACallTopEndExp(this);
    }

    public TOpenParenthesis GetOpenParenthesis ()
    {
        return _open_parenthesis_;
    }

    public void SetOpenParenthesis (TOpenParenthesis node)
    {
        if(_open_parenthesis_ != null)
        {
            _open_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_parenthesis_ = node;
    }
    public PExp GetExp ()
    {
        return _exp_;
    }

    public void SetExp (PExp node)
    {
        if(_exp_ != null)
        {
            _exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp_ = node;
    }
    public TCloseParenthesis GetCloseParenthesis ()
    {
        return _close_parenthesis_;
    }

    public void SetCloseParenthesis (TCloseParenthesis node)
    {
        if(_close_parenthesis_ != null)
        {
            _close_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _close_parenthesis_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_open_parenthesis_)
            + ToString (_exp_)
            + ToString (_close_parenthesis_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _open_parenthesis_ == child )
        {
            _open_parenthesis_ = null;
            return;
        }
        if ( _exp_ == child )
        {
            _exp_ = null;
            return;
        }
        if ( _close_parenthesis_ == child )
        {
            _close_parenthesis_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _open_parenthesis_ == oldChild )
        {
            SetOpenParenthesis ((TOpenParenthesis) newChild);
            return;
        }
        if ( _exp_ == oldChild )
        {
            SetExp ((PExp) newChild);
            return;
        }
        if ( _close_parenthesis_ == oldChild )
        {
            SetCloseParenthesis ((TCloseParenthesis) newChild);
            return;
        }
    }

}
public sealed class AEndEndExp : PEndExp
{
    private PNumber _number_;

    public AEndEndExp ()
    {
    }

    public AEndEndExp (
            PNumber _number_
    )
    {
        SetNumber (_number_);
    }

    public override Object Clone()
    {
        return new AEndEndExp (
            (PNumber)CloneNode (_number_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAEndEndExp(this);
    }

    public PNumber GetNumber ()
    {
        return _number_;
    }

    public void SetNumber (PNumber node)
    {
        if(_number_ != null)
        {
            _number_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _number_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_number_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _number_ == child )
        {
            _number_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _number_ == oldChild )
        {
            SetNumber ((PNumber) newChild);
            return;
        }
    }

}
public sealed class AIntNumber : PNumber
{
    private TInt _int_;

    public AIntNumber ()
    {
    }

    public AIntNumber (
            TInt _int_
    )
    {
        SetInt (_int_);
    }

    public override Object Clone()
    {
        return new AIntNumber (
            (TInt)CloneNode (_int_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIntNumber(this);
    }

    public TInt GetInt ()
    {
        return _int_;
    }

    public void SetInt (TInt node)
    {
        if(_int_ != null)
        {
            _int_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _int_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_int_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _int_ == child )
        {
            _int_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _int_ == oldChild )
        {
            SetInt ((TInt) newChild);
            return;
        }
    }

}
public sealed class AFloatNumber : PNumber
{
    private TFloat _float_;

    public AFloatNumber ()
    {
    }

    public AFloatNumber (
            TFloat _float_
    )
    {
        SetFloat (_float_);
    }

    public override Object Clone()
    {
        return new AFloatNumber (
            (TFloat)CloneNode (_float_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFloatNumber(this);
    }

    public TFloat GetFloat ()
    {
        return _float_;
    }

    public void SetFloat (TFloat node)
    {
        if(_float_ != null)
        {
            _float_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _float_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_float_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _float_ == child )
        {
            _float_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _float_ == oldChild )
        {
            SetFloat ((TFloat) newChild);
            return;
        }
    }

}
public sealed class AIdNumber : PNumber
{
    private TId _id_;

    public AIdNumber ()
    {
    }

    public AIdNumber (
            TId _id_
    )
    {
        SetId (_id_);
    }

    public override Object Clone()
    {
        return new AIdNumber (
            (TId)CloneNode (_id_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIdNumber(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
    }

}
public sealed class AArrayNumber : PNumber
{
    private TId _id_;
    private TOpenBracket _open_bracket_;
    private PExp _exp_;
    private TCloseBracket _close_bracket_;

    public AArrayNumber ()
    {
    }

    public AArrayNumber (
            TId _id_,
            TOpenBracket _open_bracket_,
            PExp _exp_,
            TCloseBracket _close_bracket_
    )
    {
        SetId (_id_);
        SetOpenBracket (_open_bracket_);
        SetExp (_exp_);
        SetCloseBracket (_close_bracket_);
    }

    public override Object Clone()
    {
        return new AArrayNumber (
            (TId)CloneNode (_id_),
            (TOpenBracket)CloneNode (_open_bracket_),
            (PExp)CloneNode (_exp_),
            (TCloseBracket)CloneNode (_close_bracket_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAArrayNumber(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TOpenBracket GetOpenBracket ()
    {
        return _open_bracket_;
    }

    public void SetOpenBracket (TOpenBracket node)
    {
        if(_open_bracket_ != null)
        {
            _open_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_bracket_ = node;
    }
    public PExp GetExp ()
    {
        return _exp_;
    }

    public void SetExp (PExp node)
    {
        if(_exp_ != null)
        {
            _exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp_ = node;
    }
    public TCloseBracket GetCloseBracket ()
    {
        return _close_bracket_;
    }

    public void SetCloseBracket (TCloseBracket node)
    {
        if(_close_bracket_ != null)
        {
            _close_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _close_bracket_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_open_bracket_)
            + ToString (_exp_)
            + ToString (_close_bracket_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _open_bracket_ == child )
        {
            _open_bracket_ = null;
            return;
        }
        if ( _exp_ == child )
        {
            _exp_ = null;
            return;
        }
        if ( _close_bracket_ == child )
        {
            _close_bracket_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _open_bracket_ == oldChild )
        {
            SetOpenBracket ((TOpenBracket) newChild);
            return;
        }
        if ( _exp_ == oldChild )
        {
            SetExp ((PExp) newChild);
            return;
        }
        if ( _close_bracket_ == oldChild )
        {
            SetCloseBracket ((TCloseBracket) newChild);
            return;
        }
    }

}

public sealed class Start : Node
{
    private PProgram _base_;
    private EOF _eof_;

    public Start()
    {
    }

    public Start(
        PProgram _base_,
        EOF _eof_)
    {
        SetPProgram(_base_);
        SetEOF(_eof_);
    }

    public override Object Clone()
    {
        return new Start(
            (PProgram) CloneNode(_base_),
            (EOF) CloneNode(_eof_));
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseStart(this);
    }

    public PProgram GetPProgram()
    {
        return _base_;
    }
    public void SetPProgram(PProgram node)
    {
        if(_base_ != null)
        {
            _base_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _base_ = node;
    }

    public EOF GetEOF()
    {
        return _eof_;
    }
    public void SetEOF(EOF node)
    {
        if(_eof_ != null)
        {
            _eof_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eof_ = node;
    }

    internal override void RemoveChild(Node child)
    {
        if(_base_ == child)
        {
            _base_ = null;
            return;
        }

        if(_eof_ == child)
        {
            _eof_ = null;
            return;
        }
    }
    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if(_base_ == oldChild)
        {
            SetPProgram((PProgram) newChild);
            return;
        }

        if(_eof_ == oldChild)
        {
            SetEOF((EOF) newChild);
            return;
        }
    }

    public override string ToString()
    {
        return "" +
            ToString(_base_) +
            ToString(_eof_);
    }
}
}
