/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using comp5210.node;

namespace comp5210.analysis {


public interface Analysis : Switch
{
    Object GetIn(Node node);
    void SetIn(Node node, Object inobj);
    Object GetOut(Node node);
    void SetOut(Node node, Object outobj);

    void CaseStart(Start node);
    void CaseAProgram(AProgram node);
    void CaseAConstantConstants(AConstantConstants node);
    void CaseANothingConstants(ANothingConstants node);
    void CaseAMultipleMethods(AMultipleMethods node);
    void CaseANothingMethods(ANothingMethods node);
    void CaseARightMethodHeader(ARightMethodHeader node);
    void CaseALeftMethodHeader(ALeftMethodHeader node);
    void CaseAMainMethod(AMainMethod node);
    void CaseAMainHeader(AMainHeader node);
    void CaseAVarDeclareList(AVarDeclareList node);
    void CaseAConDeclareList(AConDeclareList node);
    void CaseAWhileLoopList(AWhileLoopList node);
    void CaseAIfStatementList(AIfStatementList node);
    void CaseAArrayDeclareList(AArrayDeclareList node);
    void CaseAAssignStatementList(AAssignStatementList node);
    void CaseAProcedureCallList(AProcedureCallList node);
    void CaseANothingList(ANothingList node);
    void CaseACallProcedureCall(ACallProcedureCall node);
    void CaseANothingProcedureCall(ANothingProcedureCall node);
    void CaseAMoreFormalParameters(AMoreFormalParameters node);
    void CaseALastFormalParameters(ALastFormalParameters node);
    void CaseAMoreActualParameters(AMoreActualParameters node);
    void CaseALastActualParameters(ALastActualParameters node);
    void CaseANumbersParameters(ANumbersParameters node);
    void CaseAStringsParameters(AStringsParameters node);
    void CaseAVarDeclare(AVarDeclare node);
    void CaseAIntDeclareConstantDeclare(AIntDeclareConstantDeclare node);
    void CaseAFloatDelcareConstantDeclare(AFloatDelcareConstantDeclare node);
    void CaseAArrayDeclare(AArrayDeclare node);
    void CaseAIfStatement(AIfStatement node);
    void CaseAWhileLoop(AWhileLoop node);
    void CaseAExpressionAssignStatement(AExpressionAssignStatement node);
    void CaseAArrayAssignStatement(AArrayAssignStatement node);
    void CaseAStartExp(AStartExp node);
    void CaseAAndExp(AAndExp node);
    void CaseANotEqualExp(ANotEqualExp node);
    void CaseAEqualToExp(AEqualToExp node);
    void CaseANextExp(ANextExp node);
    void CaseAGreaterThanComparators(AGreaterThanComparators node);
    void CaseALessThanComparators(ALessThanComparators node);
    void CaseAGreaterEqualComparators(AGreaterEqualComparators node);
    void CaseALessEqualComparators(ALessEqualComparators node);
    void CaseANextComparators(ANextComparators node);
    void CaseASubtractMath1(ASubtractMath1 node);
    void CaseAAddMath1(AAddMath1 node);
    void CaseANextMath1(ANextMath1 node);
    void CaseADivideMath2(ADivideMath2 node);
    void CaseAMultiplyMath2(AMultiplyMath2 node);
    void CaseANextMath2(ANextMath2 node);
    void CaseACallTopEndExp(ACallTopEndExp node);
    void CaseAEndEndExp(AEndEndExp node);
    void CaseAIntNumber(AIntNumber node);
    void CaseAFloatNumber(AFloatNumber node);
    void CaseAIdNumber(AIdNumber node);
    void CaseAArrayNumber(AArrayNumber node);

    void CaseTWhitespace(TWhitespace node);
    void CaseTComment(TComment node);
    void CaseTAnd(TAnd node);
    void CaseTOr(TOr node);
    void CaseTNot(TNot node);
    void CaseTNotEqual(TNotEqual node);
    void CaseTLessThan(TLessThan node);
    void CaseTGreaterThan(TGreaterThan node);
    void CaseTGreaterEqual(TGreaterEqual node);
    void CaseTLessEqual(TLessEqual node);
    void CaseTEqualTo(TEqualTo node);
    void CaseTMultiply(TMultiply node);
    void CaseTDivide(TDivide node);
    void CaseTPlus(TPlus node);
    void CaseTMinus(TMinus node);
    void CaseTEquals(TEquals node);
    void CaseTSemicolon(TSemicolon node);
    void CaseTComma(TComma node);
    void CaseTPublic(TPublic node);
    void CaseTPrivate(TPrivate node);
    void CaseTMain(TMain node);
    void CaseTVar(TVar node);
    void CaseTCon(TCon node);
    void CaseTReturn(TReturn node);
    void CaseTIf(TIf node);
    void CaseTElse(TElse node);
    void CaseTWhile(TWhile node);
    void CaseTString(TString node);
    void CaseTInt(TInt node);
    void CaseTFloat(TFloat node);
    void CaseTId(TId node);
    void CaseTOpenParenthesis(TOpenParenthesis node);
    void CaseTCloseParenthesis(TCloseParenthesis node);
    void CaseTOpenBrace(TOpenBrace node);
    void CaseTCloseBrace(TCloseBrace node);
    void CaseTOpenBracket(TOpenBracket node);
    void CaseTCloseBracket(TCloseBracket node);
    void CaseEOF(EOF node);
}


public class AnalysisAdapter : Analysis
{
    private Hashtable inhash;
    private Hashtable outhash;

    public virtual Object GetIn(Node node)
    {
        if(inhash == null)
        {
            return null;
        }

        return inhash[node];
    }

    public virtual void SetIn(Node node, Object inobj)
    {
        if(this.inhash == null)
        {
            this.inhash = new Hashtable(1);
        }

        if(inobj != null)
        {
            this.inhash[node] = inobj;
        }
        else
        {
            this.inhash.Remove(node);
        }
    }
    public virtual Object GetOut(Node node)
    {
        if(outhash == null)
        {
            return null;
        }

        return outhash[node];
    }

    public virtual void SetOut(Node node, Object outobj)
    {
        if(this.outhash == null)
        {
            this.outhash = new Hashtable(1);
        }

        if(outobj != null)
        {
            this.outhash[node] = outobj;
        }
        else
        {
            this.outhash.Remove(node);
        }
    }
    public virtual void CaseStart(Start node)
    {
        DefaultCase(node);
    }

    public virtual void CaseAProgram(AProgram node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAConstantConstants(AConstantConstants node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANothingConstants(ANothingConstants node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultipleMethods(AMultipleMethods node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANothingMethods(ANothingMethods node)
    {
        DefaultCase(node);
    }
    public virtual void CaseARightMethodHeader(ARightMethodHeader node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALeftMethodHeader(ALeftMethodHeader node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMainMethod(AMainMethod node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMainHeader(AMainHeader node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAVarDeclareList(AVarDeclareList node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAConDeclareList(AConDeclareList node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAWhileLoopList(AWhileLoopList node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIfStatementList(AIfStatementList node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAArrayDeclareList(AArrayDeclareList node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAssignStatementList(AAssignStatementList node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAProcedureCallList(AProcedureCallList node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANothingList(ANothingList node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACallProcedureCall(ACallProcedureCall node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANothingProcedureCall(ANothingProcedureCall node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMoreFormalParameters(AMoreFormalParameters node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALastFormalParameters(ALastFormalParameters node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMoreActualParameters(AMoreActualParameters node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALastActualParameters(ALastActualParameters node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANumbersParameters(ANumbersParameters node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAStringsParameters(AStringsParameters node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAVarDeclare(AVarDeclare node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIntDeclareConstantDeclare(AIntDeclareConstantDeclare node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFloatDelcareConstantDeclare(AFloatDelcareConstantDeclare node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAArrayDeclare(AArrayDeclare node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIfStatement(AIfStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAWhileLoop(AWhileLoop node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAExpressionAssignStatement(AExpressionAssignStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAArrayAssignStatement(AArrayAssignStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAStartExp(AStartExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAndExp(AAndExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANotEqualExp(ANotEqualExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAEqualToExp(AEqualToExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANextExp(ANextExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAGreaterThanComparators(AGreaterThanComparators node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALessThanComparators(ALessThanComparators node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAGreaterEqualComparators(AGreaterEqualComparators node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALessEqualComparators(ALessEqualComparators node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANextComparators(ANextComparators node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASubtractMath1(ASubtractMath1 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAddMath1(AAddMath1 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANextMath1(ANextMath1 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADivideMath2(ADivideMath2 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultiplyMath2(AMultiplyMath2 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANextMath2(ANextMath2 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACallTopEndExp(ACallTopEndExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAEndEndExp(AEndEndExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIntNumber(AIntNumber node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFloatNumber(AFloatNumber node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIdNumber(AIdNumber node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAArrayNumber(AArrayNumber node)
    {
        DefaultCase(node);
    }

    public virtual void CaseTWhitespace(TWhitespace node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTComment(TComment node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTAnd(TAnd node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOr(TOr node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTNot(TNot node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTNotEqual(TNotEqual node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLessThan(TLessThan node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTGreaterThan(TGreaterThan node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTGreaterEqual(TGreaterEqual node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLessEqual(TLessEqual node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEqualTo(TEqualTo node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMultiply(TMultiply node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTDivide(TDivide node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTPlus(TPlus node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMinus(TMinus node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEquals(TEquals node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTSemicolon(TSemicolon node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTComma(TComma node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTPublic(TPublic node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTPrivate(TPrivate node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMain(TMain node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTVar(TVar node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTCon(TCon node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTReturn(TReturn node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTIf(TIf node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTElse(TElse node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTWhile(TWhile node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTString(TString node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTInt(TInt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTFloat(TFloat node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTId(TId node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOpenParenthesis(TOpenParenthesis node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTCloseParenthesis(TCloseParenthesis node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOpenBrace(TOpenBrace node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTCloseBrace(TCloseBrace node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOpenBracket(TOpenBracket node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTCloseBracket(TCloseBracket node)
    {
        DefaultCase(node);
    }

    public virtual void CaseEOF(EOF node)
    {
        DefaultCase(node);
    }

    public virtual void DefaultCase(Node node)
    {
    }
}


public class DepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetPProgram().Apply(this);
        node.GetEOF().Apply(this);
        OutStart(node);
    }

    public virtual void InAProgram(AProgram node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProgram(AProgram node)
    {
        DefaultOut(node);
    }

    public override void CaseAProgram(AProgram node)
    {
        InAProgram(node);
        if(node.GetConstants() != null)
        {
            node.GetConstants().Apply(this);
        }
        if(node.GetMethods() != null)
        {
            node.GetMethods().Apply(this);
        }
        if(node.GetMainMethod() != null)
        {
            node.GetMainMethod().Apply(this);
        }
        OutAProgram(node);
    }
    public virtual void InAConstantConstants(AConstantConstants node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConstantConstants(AConstantConstants node)
    {
        DefaultOut(node);
    }

    public override void CaseAConstantConstants(AConstantConstants node)
    {
        InAConstantConstants(node);
        if(node.GetConstantDeclare() != null)
        {
            node.GetConstantDeclare().Apply(this);
        }
        if(node.GetConstants() != null)
        {
            node.GetConstants().Apply(this);
        }
        OutAConstantConstants(node);
    }
    public virtual void InANothingConstants(ANothingConstants node)
    {
        DefaultIn(node);
    }

    public virtual void OutANothingConstants(ANothingConstants node)
    {
        DefaultOut(node);
    }

    public override void CaseANothingConstants(ANothingConstants node)
    {
        InANothingConstants(node);
        OutANothingConstants(node);
    }
    public virtual void InAMultipleMethods(AMultipleMethods node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleMethods(AMultipleMethods node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleMethods(AMultipleMethods node)
    {
        InAMultipleMethods(node);
        if(node.GetMethods() != null)
        {
            node.GetMethods().Apply(this);
        }
        if(node.GetMethodHeader() != null)
        {
            node.GetMethodHeader().Apply(this);
        }
        if(node.GetOpenBrace() != null)
        {
            node.GetOpenBrace().Apply(this);
        }
        if(node.GetList() != null)
        {
            node.GetList().Apply(this);
        }
        if(node.GetCloseBrace() != null)
        {
            node.GetCloseBrace().Apply(this);
        }
        OutAMultipleMethods(node);
    }
    public virtual void InANothingMethods(ANothingMethods node)
    {
        DefaultIn(node);
    }

    public virtual void OutANothingMethods(ANothingMethods node)
    {
        DefaultOut(node);
    }

    public override void CaseANothingMethods(ANothingMethods node)
    {
        InANothingMethods(node);
        OutANothingMethods(node);
    }
    public virtual void InARightMethodHeader(ARightMethodHeader node)
    {
        DefaultIn(node);
    }

    public virtual void OutARightMethodHeader(ARightMethodHeader node)
    {
        DefaultOut(node);
    }

    public override void CaseARightMethodHeader(ARightMethodHeader node)
    {
        InARightMethodHeader(node);
        if(node.GetPublic() != null)
        {
            node.GetPublic().Apply(this);
        }
        if(node.GetVoid() != null)
        {
            node.GetVoid().Apply(this);
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        if(node.GetOpenParenthesis() != null)
        {
            node.GetOpenParenthesis().Apply(this);
        }
        if(node.GetFormalParameters() != null)
        {
            node.GetFormalParameters().Apply(this);
        }
        if(node.GetCloseParenthesis() != null)
        {
            node.GetCloseParenthesis().Apply(this);
        }
        OutARightMethodHeader(node);
    }
    public virtual void InALeftMethodHeader(ALeftMethodHeader node)
    {
        DefaultIn(node);
    }

    public virtual void OutALeftMethodHeader(ALeftMethodHeader node)
    {
        DefaultOut(node);
    }

    public override void CaseALeftMethodHeader(ALeftMethodHeader node)
    {
        InALeftMethodHeader(node);
        if(node.GetPublic() != null)
        {
            node.GetPublic().Apply(this);
        }
        if(node.GetVoid() != null)
        {
            node.GetVoid().Apply(this);
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        if(node.GetOpenParenthesis() != null)
        {
            node.GetOpenParenthesis().Apply(this);
        }
        if(node.GetCloseParenthesis() != null)
        {
            node.GetCloseParenthesis().Apply(this);
        }
        OutALeftMethodHeader(node);
    }
    public virtual void InAMainMethod(AMainMethod node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMainMethod(AMainMethod node)
    {
        DefaultOut(node);
    }

    public override void CaseAMainMethod(AMainMethod node)
    {
        InAMainMethod(node);
        if(node.GetMainHeader() != null)
        {
            node.GetMainHeader().Apply(this);
        }
        if(node.GetOpenBrace() != null)
        {
            node.GetOpenBrace().Apply(this);
        }
        if(node.GetList() != null)
        {
            node.GetList().Apply(this);
        }
        if(node.GetCloseBrace() != null)
        {
            node.GetCloseBrace().Apply(this);
        }
        OutAMainMethod(node);
    }
    public virtual void InAMainHeader(AMainHeader node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMainHeader(AMainHeader node)
    {
        DefaultOut(node);
    }

    public override void CaseAMainHeader(AMainHeader node)
    {
        InAMainHeader(node);
        if(node.GetPublic() != null)
        {
            node.GetPublic().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetMain() != null)
        {
            node.GetMain().Apply(this);
        }
        if(node.GetOpenParenthesis() != null)
        {
            node.GetOpenParenthesis().Apply(this);
        }
        if(node.GetCloseParenthesis() != null)
        {
            node.GetCloseParenthesis().Apply(this);
        }
        OutAMainHeader(node);
    }
    public virtual void InAVarDeclareList(AVarDeclareList node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVarDeclareList(AVarDeclareList node)
    {
        DefaultOut(node);
    }

    public override void CaseAVarDeclareList(AVarDeclareList node)
    {
        InAVarDeclareList(node);
        if(node.GetVarDeclare() != null)
        {
            node.GetVarDeclare().Apply(this);
        }
        if(node.GetList() != null)
        {
            node.GetList().Apply(this);
        }
        OutAVarDeclareList(node);
    }
    public virtual void InAConDeclareList(AConDeclareList node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConDeclareList(AConDeclareList node)
    {
        DefaultOut(node);
    }

    public override void CaseAConDeclareList(AConDeclareList node)
    {
        InAConDeclareList(node);
        if(node.GetConstantDeclare() != null)
        {
            node.GetConstantDeclare().Apply(this);
        }
        if(node.GetList() != null)
        {
            node.GetList().Apply(this);
        }
        OutAConDeclareList(node);
    }
    public virtual void InAWhileLoopList(AWhileLoopList node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileLoopList(AWhileLoopList node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileLoopList(AWhileLoopList node)
    {
        InAWhileLoopList(node);
        if(node.GetWhileLoop() != null)
        {
            node.GetWhileLoop().Apply(this);
        }
        if(node.GetList() != null)
        {
            node.GetList().Apply(this);
        }
        OutAWhileLoopList(node);
    }
    public virtual void InAIfStatementList(AIfStatementList node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfStatementList(AIfStatementList node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfStatementList(AIfStatementList node)
    {
        InAIfStatementList(node);
        if(node.GetIfStatement() != null)
        {
            node.GetIfStatement().Apply(this);
        }
        if(node.GetList() != null)
        {
            node.GetList().Apply(this);
        }
        OutAIfStatementList(node);
    }
    public virtual void InAArrayDeclareList(AArrayDeclareList node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArrayDeclareList(AArrayDeclareList node)
    {
        DefaultOut(node);
    }

    public override void CaseAArrayDeclareList(AArrayDeclareList node)
    {
        InAArrayDeclareList(node);
        if(node.GetArrayDeclare() != null)
        {
            node.GetArrayDeclare().Apply(this);
        }
        if(node.GetList() != null)
        {
            node.GetList().Apply(this);
        }
        OutAArrayDeclareList(node);
    }
    public virtual void InAAssignStatementList(AAssignStatementList node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignStatementList(AAssignStatementList node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignStatementList(AAssignStatementList node)
    {
        InAAssignStatementList(node);
        if(node.GetAssignStatement() != null)
        {
            node.GetAssignStatement().Apply(this);
        }
        if(node.GetList() != null)
        {
            node.GetList().Apply(this);
        }
        OutAAssignStatementList(node);
    }
    public virtual void InAProcedureCallList(AProcedureCallList node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProcedureCallList(AProcedureCallList node)
    {
        DefaultOut(node);
    }

    public override void CaseAProcedureCallList(AProcedureCallList node)
    {
        InAProcedureCallList(node);
        if(node.GetProcedureCall() != null)
        {
            node.GetProcedureCall().Apply(this);
        }
        if(node.GetList() != null)
        {
            node.GetList().Apply(this);
        }
        OutAProcedureCallList(node);
    }
    public virtual void InANothingList(ANothingList node)
    {
        DefaultIn(node);
    }

    public virtual void OutANothingList(ANothingList node)
    {
        DefaultOut(node);
    }

    public override void CaseANothingList(ANothingList node)
    {
        InANothingList(node);
        OutANothingList(node);
    }
    public virtual void InACallProcedureCall(ACallProcedureCall node)
    {
        DefaultIn(node);
    }

    public virtual void OutACallProcedureCall(ACallProcedureCall node)
    {
        DefaultOut(node);
    }

    public override void CaseACallProcedureCall(ACallProcedureCall node)
    {
        InACallProcedureCall(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetOpenParenthesis() != null)
        {
            node.GetOpenParenthesis().Apply(this);
        }
        if(node.GetActualParameters() != null)
        {
            node.GetActualParameters().Apply(this);
        }
        if(node.GetCloseParenthesis() != null)
        {
            node.GetCloseParenthesis().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        OutACallProcedureCall(node);
    }
    public virtual void InANothingProcedureCall(ANothingProcedureCall node)
    {
        DefaultIn(node);
    }

    public virtual void OutANothingProcedureCall(ANothingProcedureCall node)
    {
        DefaultOut(node);
    }

    public override void CaseANothingProcedureCall(ANothingProcedureCall node)
    {
        InANothingProcedureCall(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetOpenParenthesis() != null)
        {
            node.GetOpenParenthesis().Apply(this);
        }
        if(node.GetCloseParenthesis() != null)
        {
            node.GetCloseParenthesis().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        OutANothingProcedureCall(node);
    }
    public virtual void InAMoreFormalParameters(AMoreFormalParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMoreFormalParameters(AMoreFormalParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseAMoreFormalParameters(AMoreFormalParameters node)
    {
        InAMoreFormalParameters(node);
        if(node.GetFormalParameters() != null)
        {
            node.GetFormalParameters().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutAMoreFormalParameters(node);
    }
    public virtual void InALastFormalParameters(ALastFormalParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutALastFormalParameters(ALastFormalParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseALastFormalParameters(ALastFormalParameters node)
    {
        InALastFormalParameters(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutALastFormalParameters(node);
    }
    public virtual void InAMoreActualParameters(AMoreActualParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMoreActualParameters(AMoreActualParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseAMoreActualParameters(AMoreActualParameters node)
    {
        InAMoreActualParameters(node);
        if(node.GetActualParameters() != null)
        {
            node.GetActualParameters().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetParameters() != null)
        {
            node.GetParameters().Apply(this);
        }
        OutAMoreActualParameters(node);
    }
    public virtual void InALastActualParameters(ALastActualParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutALastActualParameters(ALastActualParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseALastActualParameters(ALastActualParameters node)
    {
        InALastActualParameters(node);
        if(node.GetParameters() != null)
        {
            node.GetParameters().Apply(this);
        }
        OutALastActualParameters(node);
    }
    public virtual void InANumbersParameters(ANumbersParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutANumbersParameters(ANumbersParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseANumbersParameters(ANumbersParameters node)
    {
        InANumbersParameters(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutANumbersParameters(node);
    }
    public virtual void InAStringsParameters(AStringsParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringsParameters(AStringsParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringsParameters(AStringsParameters node)
    {
        InAStringsParameters(node);
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        OutAStringsParameters(node);
    }
    public virtual void InAVarDeclare(AVarDeclare node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVarDeclare(AVarDeclare node)
    {
        DefaultOut(node);
    }

    public override void CaseAVarDeclare(AVarDeclare node)
    {
        InAVarDeclare(node);
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        OutAVarDeclare(node);
    }
    public virtual void InAIntDeclareConstantDeclare(AIntDeclareConstantDeclare node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntDeclareConstantDeclare(AIntDeclareConstantDeclare node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntDeclareConstantDeclare(AIntDeclareConstantDeclare node)
    {
        InAIntDeclareConstantDeclare(node);
        if(node.GetCon() != null)
        {
            node.GetCon().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        if(node.GetEquals() != null)
        {
            node.GetEquals().Apply(this);
        }
        if(node.GetInt() != null)
        {
            node.GetInt().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        OutAIntDeclareConstantDeclare(node);
    }
    public virtual void InAFloatDelcareConstantDeclare(AFloatDelcareConstantDeclare node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatDelcareConstantDeclare(AFloatDelcareConstantDeclare node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatDelcareConstantDeclare(AFloatDelcareConstantDeclare node)
    {
        InAFloatDelcareConstantDeclare(node);
        if(node.GetCon() != null)
        {
            node.GetCon().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        if(node.GetEquals() != null)
        {
            node.GetEquals().Apply(this);
        }
        if(node.GetFloat() != null)
        {
            node.GetFloat().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        OutAFloatDelcareConstantDeclare(node);
    }
    public virtual void InAArrayDeclare(AArrayDeclare node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArrayDeclare(AArrayDeclare node)
    {
        DefaultOut(node);
    }

    public override void CaseAArrayDeclare(AArrayDeclare node)
    {
        InAArrayDeclare(node);
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        if(node.GetOpenBracket() != null)
        {
            node.GetOpenBracket().Apply(this);
        }
        if(node.GetNumber() != null)
        {
            node.GetNumber().Apply(this);
        }
        if(node.GetCloseBracket() != null)
        {
            node.GetCloseBracket().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        OutAArrayDeclare(node);
    }
    public virtual void InAIfStatement(AIfStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfStatement(AIfStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfStatement(AIfStatement node)
    {
        InAIfStatement(node);
        if(node.GetIf() != null)
        {
            node.GetIf().Apply(this);
        }
        if(node.GetOpenParenthesis() != null)
        {
            node.GetOpenParenthesis().Apply(this);
        }
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        if(node.GetCloseParenthesis() != null)
        {
            node.GetCloseParenthesis().Apply(this);
        }
        if(node.GetOpenBrace() != null)
        {
            node.GetOpenBrace().Apply(this);
        }
        if(node.GetList() != null)
        {
            node.GetList().Apply(this);
        }
        if(node.GetCloseBrace() != null)
        {
            node.GetCloseBrace().Apply(this);
        }
        OutAIfStatement(node);
    }
    public virtual void InAWhileLoop(AWhileLoop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileLoop(AWhileLoop node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileLoop(AWhileLoop node)
    {
        InAWhileLoop(node);
        if(node.GetWhile() != null)
        {
            node.GetWhile().Apply(this);
        }
        if(node.GetOpenParenthesis() != null)
        {
            node.GetOpenParenthesis().Apply(this);
        }
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        if(node.GetCloseParenthesis() != null)
        {
            node.GetCloseParenthesis().Apply(this);
        }
        if(node.GetOpenBrace() != null)
        {
            node.GetOpenBrace().Apply(this);
        }
        if(node.GetList() != null)
        {
            node.GetList().Apply(this);
        }
        if(node.GetCloseBrace() != null)
        {
            node.GetCloseBrace().Apply(this);
        }
        OutAWhileLoop(node);
    }
    public virtual void InAExpressionAssignStatement(AExpressionAssignStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAExpressionAssignStatement(AExpressionAssignStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAExpressionAssignStatement(AExpressionAssignStatement node)
    {
        InAExpressionAssignStatement(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetEquals() != null)
        {
            node.GetEquals().Apply(this);
        }
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        OutAExpressionAssignStatement(node);
    }
    public virtual void InAArrayAssignStatement(AArrayAssignStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArrayAssignStatement(AArrayAssignStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAArrayAssignStatement(AArrayAssignStatement node)
    {
        InAArrayAssignStatement(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetOpenBracket() != null)
        {
            node.GetOpenBracket().Apply(this);
        }
        if(node.GetInBracket() != null)
        {
            node.GetInBracket().Apply(this);
        }
        if(node.GetCloseBracket() != null)
        {
            node.GetCloseBracket().Apply(this);
        }
        if(node.GetEquals() != null)
        {
            node.GetEquals().Apply(this);
        }
        if(node.GetEqualto() != null)
        {
            node.GetEqualto().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        OutAArrayAssignStatement(node);
    }
    public virtual void InAStartExp(AStartExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStartExp(AStartExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAStartExp(AStartExp node)
    {
        InAStartExp(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        if(node.GetOr() != null)
        {
            node.GetOr().Apply(this);
        }
        if(node.GetComparators() != null)
        {
            node.GetComparators().Apply(this);
        }
        OutAStartExp(node);
    }
    public virtual void InAAndExp(AAndExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAndExp(AAndExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAAndExp(AAndExp node)
    {
        InAAndExp(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        if(node.GetAnd() != null)
        {
            node.GetAnd().Apply(this);
        }
        if(node.GetComparators() != null)
        {
            node.GetComparators().Apply(this);
        }
        OutAAndExp(node);
    }
    public virtual void InANotEqualExp(ANotEqualExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutANotEqualExp(ANotEqualExp node)
    {
        DefaultOut(node);
    }

    public override void CaseANotEqualExp(ANotEqualExp node)
    {
        InANotEqualExp(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        if(node.GetNotEqual() != null)
        {
            node.GetNotEqual().Apply(this);
        }
        if(node.GetComparators() != null)
        {
            node.GetComparators().Apply(this);
        }
        OutANotEqualExp(node);
    }
    public virtual void InAEqualToExp(AEqualToExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEqualToExp(AEqualToExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAEqualToExp(AEqualToExp node)
    {
        InAEqualToExp(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        if(node.GetEqualTo() != null)
        {
            node.GetEqualTo().Apply(this);
        }
        if(node.GetComparators() != null)
        {
            node.GetComparators().Apply(this);
        }
        OutAEqualToExp(node);
    }
    public virtual void InANextExp(ANextExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutANextExp(ANextExp node)
    {
        DefaultOut(node);
    }

    public override void CaseANextExp(ANextExp node)
    {
        InANextExp(node);
        if(node.GetComparators() != null)
        {
            node.GetComparators().Apply(this);
        }
        OutANextExp(node);
    }
    public virtual void InAGreaterThanComparators(AGreaterThanComparators node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreaterThanComparators(AGreaterThanComparators node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreaterThanComparators(AGreaterThanComparators node)
    {
        InAGreaterThanComparators(node);
        if(node.GetOne() != null)
        {
            node.GetOne().Apply(this);
        }
        if(node.GetGreaterThan() != null)
        {
            node.GetGreaterThan().Apply(this);
        }
        if(node.GetTwo() != null)
        {
            node.GetTwo().Apply(this);
        }
        OutAGreaterThanComparators(node);
    }
    public virtual void InALessThanComparators(ALessThanComparators node)
    {
        DefaultIn(node);
    }

    public virtual void OutALessThanComparators(ALessThanComparators node)
    {
        DefaultOut(node);
    }

    public override void CaseALessThanComparators(ALessThanComparators node)
    {
        InALessThanComparators(node);
        if(node.GetOne() != null)
        {
            node.GetOne().Apply(this);
        }
        if(node.GetLessThan() != null)
        {
            node.GetLessThan().Apply(this);
        }
        if(node.GetTwo() != null)
        {
            node.GetTwo().Apply(this);
        }
        OutALessThanComparators(node);
    }
    public virtual void InAGreaterEqualComparators(AGreaterEqualComparators node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreaterEqualComparators(AGreaterEqualComparators node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreaterEqualComparators(AGreaterEqualComparators node)
    {
        InAGreaterEqualComparators(node);
        if(node.GetOne() != null)
        {
            node.GetOne().Apply(this);
        }
        if(node.GetGreaterEqual() != null)
        {
            node.GetGreaterEqual().Apply(this);
        }
        if(node.GetTwo() != null)
        {
            node.GetTwo().Apply(this);
        }
        OutAGreaterEqualComparators(node);
    }
    public virtual void InALessEqualComparators(ALessEqualComparators node)
    {
        DefaultIn(node);
    }

    public virtual void OutALessEqualComparators(ALessEqualComparators node)
    {
        DefaultOut(node);
    }

    public override void CaseALessEqualComparators(ALessEqualComparators node)
    {
        InALessEqualComparators(node);
        if(node.GetOne() != null)
        {
            node.GetOne().Apply(this);
        }
        if(node.GetLessEqual() != null)
        {
            node.GetLessEqual().Apply(this);
        }
        if(node.GetTwo() != null)
        {
            node.GetTwo().Apply(this);
        }
        OutALessEqualComparators(node);
    }
    public virtual void InANextComparators(ANextComparators node)
    {
        DefaultIn(node);
    }

    public virtual void OutANextComparators(ANextComparators node)
    {
        DefaultOut(node);
    }

    public override void CaseANextComparators(ANextComparators node)
    {
        InANextComparators(node);
        if(node.GetMath1() != null)
        {
            node.GetMath1().Apply(this);
        }
        OutANextComparators(node);
    }
    public virtual void InASubtractMath1(ASubtractMath1 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASubtractMath1(ASubtractMath1 node)
    {
        DefaultOut(node);
    }

    public override void CaseASubtractMath1(ASubtractMath1 node)
    {
        InASubtractMath1(node);
        if(node.GetMath1() != null)
        {
            node.GetMath1().Apply(this);
        }
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        if(node.GetMath2() != null)
        {
            node.GetMath2().Apply(this);
        }
        OutASubtractMath1(node);
    }
    public virtual void InAAddMath1(AAddMath1 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAddMath1(AAddMath1 node)
    {
        DefaultOut(node);
    }

    public override void CaseAAddMath1(AAddMath1 node)
    {
        InAAddMath1(node);
        if(node.GetMath1() != null)
        {
            node.GetMath1().Apply(this);
        }
        if(node.GetPlus() != null)
        {
            node.GetPlus().Apply(this);
        }
        if(node.GetMath2() != null)
        {
            node.GetMath2().Apply(this);
        }
        OutAAddMath1(node);
    }
    public virtual void InANextMath1(ANextMath1 node)
    {
        DefaultIn(node);
    }

    public virtual void OutANextMath1(ANextMath1 node)
    {
        DefaultOut(node);
    }

    public override void CaseANextMath1(ANextMath1 node)
    {
        InANextMath1(node);
        if(node.GetMath2() != null)
        {
            node.GetMath2().Apply(this);
        }
        OutANextMath1(node);
    }
    public virtual void InADivideMath2(ADivideMath2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutADivideMath2(ADivideMath2 node)
    {
        DefaultOut(node);
    }

    public override void CaseADivideMath2(ADivideMath2 node)
    {
        InADivideMath2(node);
        if(node.GetMath2() != null)
        {
            node.GetMath2().Apply(this);
        }
        if(node.GetDivide() != null)
        {
            node.GetDivide().Apply(this);
        }
        if(node.GetEndExp() != null)
        {
            node.GetEndExp().Apply(this);
        }
        OutADivideMath2(node);
    }
    public virtual void InAMultiplyMath2(AMultiplyMath2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultiplyMath2(AMultiplyMath2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultiplyMath2(AMultiplyMath2 node)
    {
        InAMultiplyMath2(node);
        if(node.GetMath2() != null)
        {
            node.GetMath2().Apply(this);
        }
        if(node.GetMultiply() != null)
        {
            node.GetMultiply().Apply(this);
        }
        if(node.GetEndExp() != null)
        {
            node.GetEndExp().Apply(this);
        }
        OutAMultiplyMath2(node);
    }
    public virtual void InANextMath2(ANextMath2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutANextMath2(ANextMath2 node)
    {
        DefaultOut(node);
    }

    public override void CaseANextMath2(ANextMath2 node)
    {
        InANextMath2(node);
        if(node.GetEndExp() != null)
        {
            node.GetEndExp().Apply(this);
        }
        OutANextMath2(node);
    }
    public virtual void InACallTopEndExp(ACallTopEndExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutACallTopEndExp(ACallTopEndExp node)
    {
        DefaultOut(node);
    }

    public override void CaseACallTopEndExp(ACallTopEndExp node)
    {
        InACallTopEndExp(node);
        if(node.GetOpenParenthesis() != null)
        {
            node.GetOpenParenthesis().Apply(this);
        }
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        if(node.GetCloseParenthesis() != null)
        {
            node.GetCloseParenthesis().Apply(this);
        }
        OutACallTopEndExp(node);
    }
    public virtual void InAEndEndExp(AEndEndExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEndEndExp(AEndEndExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAEndEndExp(AEndEndExp node)
    {
        InAEndEndExp(node);
        if(node.GetNumber() != null)
        {
            node.GetNumber().Apply(this);
        }
        OutAEndEndExp(node);
    }
    public virtual void InAIntNumber(AIntNumber node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntNumber(AIntNumber node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntNumber(AIntNumber node)
    {
        InAIntNumber(node);
        if(node.GetInt() != null)
        {
            node.GetInt().Apply(this);
        }
        OutAIntNumber(node);
    }
    public virtual void InAFloatNumber(AFloatNumber node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatNumber(AFloatNumber node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatNumber(AFloatNumber node)
    {
        InAFloatNumber(node);
        if(node.GetFloat() != null)
        {
            node.GetFloat().Apply(this);
        }
        OutAFloatNumber(node);
    }
    public virtual void InAIdNumber(AIdNumber node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIdNumber(AIdNumber node)
    {
        DefaultOut(node);
    }

    public override void CaseAIdNumber(AIdNumber node)
    {
        InAIdNumber(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAIdNumber(node);
    }
    public virtual void InAArrayNumber(AArrayNumber node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArrayNumber(AArrayNumber node)
    {
        DefaultOut(node);
    }

    public override void CaseAArrayNumber(AArrayNumber node)
    {
        InAArrayNumber(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetOpenBracket() != null)
        {
            node.GetOpenBracket().Apply(this);
        }
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        if(node.GetCloseBracket() != null)
        {
            node.GetCloseBracket().Apply(this);
        }
        OutAArrayNumber(node);
    }
}


public class ReversedDepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetEOF().Apply(this);
        node.GetPProgram().Apply(this);
        OutStart(node);
    }

    public virtual void InAProgram(AProgram node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProgram(AProgram node)
    {
        DefaultOut(node);
    }

    public override void CaseAProgram(AProgram node)
    {
        InAProgram(node);
        if(node.GetMainMethod() != null)
        {
            node.GetMainMethod().Apply(this);
        }
        if(node.GetMethods() != null)
        {
            node.GetMethods().Apply(this);
        }
        if(node.GetConstants() != null)
        {
            node.GetConstants().Apply(this);
        }
        OutAProgram(node);
    }
    public virtual void InAConstantConstants(AConstantConstants node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConstantConstants(AConstantConstants node)
    {
        DefaultOut(node);
    }

    public override void CaseAConstantConstants(AConstantConstants node)
    {
        InAConstantConstants(node);
        if(node.GetConstants() != null)
        {
            node.GetConstants().Apply(this);
        }
        if(node.GetConstantDeclare() != null)
        {
            node.GetConstantDeclare().Apply(this);
        }
        OutAConstantConstants(node);
    }
    public virtual void InANothingConstants(ANothingConstants node)
    {
        DefaultIn(node);
    }

    public virtual void OutANothingConstants(ANothingConstants node)
    {
        DefaultOut(node);
    }

    public override void CaseANothingConstants(ANothingConstants node)
    {
        InANothingConstants(node);
        OutANothingConstants(node);
    }
    public virtual void InAMultipleMethods(AMultipleMethods node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleMethods(AMultipleMethods node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleMethods(AMultipleMethods node)
    {
        InAMultipleMethods(node);
        if(node.GetCloseBrace() != null)
        {
            node.GetCloseBrace().Apply(this);
        }
        if(node.GetList() != null)
        {
            node.GetList().Apply(this);
        }
        if(node.GetOpenBrace() != null)
        {
            node.GetOpenBrace().Apply(this);
        }
        if(node.GetMethodHeader() != null)
        {
            node.GetMethodHeader().Apply(this);
        }
        if(node.GetMethods() != null)
        {
            node.GetMethods().Apply(this);
        }
        OutAMultipleMethods(node);
    }
    public virtual void InANothingMethods(ANothingMethods node)
    {
        DefaultIn(node);
    }

    public virtual void OutANothingMethods(ANothingMethods node)
    {
        DefaultOut(node);
    }

    public override void CaseANothingMethods(ANothingMethods node)
    {
        InANothingMethods(node);
        OutANothingMethods(node);
    }
    public virtual void InARightMethodHeader(ARightMethodHeader node)
    {
        DefaultIn(node);
    }

    public virtual void OutARightMethodHeader(ARightMethodHeader node)
    {
        DefaultOut(node);
    }

    public override void CaseARightMethodHeader(ARightMethodHeader node)
    {
        InARightMethodHeader(node);
        if(node.GetCloseParenthesis() != null)
        {
            node.GetCloseParenthesis().Apply(this);
        }
        if(node.GetFormalParameters() != null)
        {
            node.GetFormalParameters().Apply(this);
        }
        if(node.GetOpenParenthesis() != null)
        {
            node.GetOpenParenthesis().Apply(this);
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        if(node.GetVoid() != null)
        {
            node.GetVoid().Apply(this);
        }
        if(node.GetPublic() != null)
        {
            node.GetPublic().Apply(this);
        }
        OutARightMethodHeader(node);
    }
    public virtual void InALeftMethodHeader(ALeftMethodHeader node)
    {
        DefaultIn(node);
    }

    public virtual void OutALeftMethodHeader(ALeftMethodHeader node)
    {
        DefaultOut(node);
    }

    public override void CaseALeftMethodHeader(ALeftMethodHeader node)
    {
        InALeftMethodHeader(node);
        if(node.GetCloseParenthesis() != null)
        {
            node.GetCloseParenthesis().Apply(this);
        }
        if(node.GetOpenParenthesis() != null)
        {
            node.GetOpenParenthesis().Apply(this);
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        if(node.GetVoid() != null)
        {
            node.GetVoid().Apply(this);
        }
        if(node.GetPublic() != null)
        {
            node.GetPublic().Apply(this);
        }
        OutALeftMethodHeader(node);
    }
    public virtual void InAMainMethod(AMainMethod node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMainMethod(AMainMethod node)
    {
        DefaultOut(node);
    }

    public override void CaseAMainMethod(AMainMethod node)
    {
        InAMainMethod(node);
        if(node.GetCloseBrace() != null)
        {
            node.GetCloseBrace().Apply(this);
        }
        if(node.GetList() != null)
        {
            node.GetList().Apply(this);
        }
        if(node.GetOpenBrace() != null)
        {
            node.GetOpenBrace().Apply(this);
        }
        if(node.GetMainHeader() != null)
        {
            node.GetMainHeader().Apply(this);
        }
        OutAMainMethod(node);
    }
    public virtual void InAMainHeader(AMainHeader node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMainHeader(AMainHeader node)
    {
        DefaultOut(node);
    }

    public override void CaseAMainHeader(AMainHeader node)
    {
        InAMainHeader(node);
        if(node.GetCloseParenthesis() != null)
        {
            node.GetCloseParenthesis().Apply(this);
        }
        if(node.GetOpenParenthesis() != null)
        {
            node.GetOpenParenthesis().Apply(this);
        }
        if(node.GetMain() != null)
        {
            node.GetMain().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetPublic() != null)
        {
            node.GetPublic().Apply(this);
        }
        OutAMainHeader(node);
    }
    public virtual void InAVarDeclareList(AVarDeclareList node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVarDeclareList(AVarDeclareList node)
    {
        DefaultOut(node);
    }

    public override void CaseAVarDeclareList(AVarDeclareList node)
    {
        InAVarDeclareList(node);
        if(node.GetList() != null)
        {
            node.GetList().Apply(this);
        }
        if(node.GetVarDeclare() != null)
        {
            node.GetVarDeclare().Apply(this);
        }
        OutAVarDeclareList(node);
    }
    public virtual void InAConDeclareList(AConDeclareList node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConDeclareList(AConDeclareList node)
    {
        DefaultOut(node);
    }

    public override void CaseAConDeclareList(AConDeclareList node)
    {
        InAConDeclareList(node);
        if(node.GetList() != null)
        {
            node.GetList().Apply(this);
        }
        if(node.GetConstantDeclare() != null)
        {
            node.GetConstantDeclare().Apply(this);
        }
        OutAConDeclareList(node);
    }
    public virtual void InAWhileLoopList(AWhileLoopList node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileLoopList(AWhileLoopList node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileLoopList(AWhileLoopList node)
    {
        InAWhileLoopList(node);
        if(node.GetList() != null)
        {
            node.GetList().Apply(this);
        }
        if(node.GetWhileLoop() != null)
        {
            node.GetWhileLoop().Apply(this);
        }
        OutAWhileLoopList(node);
    }
    public virtual void InAIfStatementList(AIfStatementList node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfStatementList(AIfStatementList node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfStatementList(AIfStatementList node)
    {
        InAIfStatementList(node);
        if(node.GetList() != null)
        {
            node.GetList().Apply(this);
        }
        if(node.GetIfStatement() != null)
        {
            node.GetIfStatement().Apply(this);
        }
        OutAIfStatementList(node);
    }
    public virtual void InAArrayDeclareList(AArrayDeclareList node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArrayDeclareList(AArrayDeclareList node)
    {
        DefaultOut(node);
    }

    public override void CaseAArrayDeclareList(AArrayDeclareList node)
    {
        InAArrayDeclareList(node);
        if(node.GetList() != null)
        {
            node.GetList().Apply(this);
        }
        if(node.GetArrayDeclare() != null)
        {
            node.GetArrayDeclare().Apply(this);
        }
        OutAArrayDeclareList(node);
    }
    public virtual void InAAssignStatementList(AAssignStatementList node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignStatementList(AAssignStatementList node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignStatementList(AAssignStatementList node)
    {
        InAAssignStatementList(node);
        if(node.GetList() != null)
        {
            node.GetList().Apply(this);
        }
        if(node.GetAssignStatement() != null)
        {
            node.GetAssignStatement().Apply(this);
        }
        OutAAssignStatementList(node);
    }
    public virtual void InAProcedureCallList(AProcedureCallList node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProcedureCallList(AProcedureCallList node)
    {
        DefaultOut(node);
    }

    public override void CaseAProcedureCallList(AProcedureCallList node)
    {
        InAProcedureCallList(node);
        if(node.GetList() != null)
        {
            node.GetList().Apply(this);
        }
        if(node.GetProcedureCall() != null)
        {
            node.GetProcedureCall().Apply(this);
        }
        OutAProcedureCallList(node);
    }
    public virtual void InANothingList(ANothingList node)
    {
        DefaultIn(node);
    }

    public virtual void OutANothingList(ANothingList node)
    {
        DefaultOut(node);
    }

    public override void CaseANothingList(ANothingList node)
    {
        InANothingList(node);
        OutANothingList(node);
    }
    public virtual void InACallProcedureCall(ACallProcedureCall node)
    {
        DefaultIn(node);
    }

    public virtual void OutACallProcedureCall(ACallProcedureCall node)
    {
        DefaultOut(node);
    }

    public override void CaseACallProcedureCall(ACallProcedureCall node)
    {
        InACallProcedureCall(node);
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetCloseParenthesis() != null)
        {
            node.GetCloseParenthesis().Apply(this);
        }
        if(node.GetActualParameters() != null)
        {
            node.GetActualParameters().Apply(this);
        }
        if(node.GetOpenParenthesis() != null)
        {
            node.GetOpenParenthesis().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutACallProcedureCall(node);
    }
    public virtual void InANothingProcedureCall(ANothingProcedureCall node)
    {
        DefaultIn(node);
    }

    public virtual void OutANothingProcedureCall(ANothingProcedureCall node)
    {
        DefaultOut(node);
    }

    public override void CaseANothingProcedureCall(ANothingProcedureCall node)
    {
        InANothingProcedureCall(node);
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetCloseParenthesis() != null)
        {
            node.GetCloseParenthesis().Apply(this);
        }
        if(node.GetOpenParenthesis() != null)
        {
            node.GetOpenParenthesis().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutANothingProcedureCall(node);
    }
    public virtual void InAMoreFormalParameters(AMoreFormalParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMoreFormalParameters(AMoreFormalParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseAMoreFormalParameters(AMoreFormalParameters node)
    {
        InAMoreFormalParameters(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetFormalParameters() != null)
        {
            node.GetFormalParameters().Apply(this);
        }
        OutAMoreFormalParameters(node);
    }
    public virtual void InALastFormalParameters(ALastFormalParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutALastFormalParameters(ALastFormalParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseALastFormalParameters(ALastFormalParameters node)
    {
        InALastFormalParameters(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutALastFormalParameters(node);
    }
    public virtual void InAMoreActualParameters(AMoreActualParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMoreActualParameters(AMoreActualParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseAMoreActualParameters(AMoreActualParameters node)
    {
        InAMoreActualParameters(node);
        if(node.GetParameters() != null)
        {
            node.GetParameters().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetActualParameters() != null)
        {
            node.GetActualParameters().Apply(this);
        }
        OutAMoreActualParameters(node);
    }
    public virtual void InALastActualParameters(ALastActualParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutALastActualParameters(ALastActualParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseALastActualParameters(ALastActualParameters node)
    {
        InALastActualParameters(node);
        if(node.GetParameters() != null)
        {
            node.GetParameters().Apply(this);
        }
        OutALastActualParameters(node);
    }
    public virtual void InANumbersParameters(ANumbersParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutANumbersParameters(ANumbersParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseANumbersParameters(ANumbersParameters node)
    {
        InANumbersParameters(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutANumbersParameters(node);
    }
    public virtual void InAStringsParameters(AStringsParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringsParameters(AStringsParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringsParameters(AStringsParameters node)
    {
        InAStringsParameters(node);
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        OutAStringsParameters(node);
    }
    public virtual void InAVarDeclare(AVarDeclare node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVarDeclare(AVarDeclare node)
    {
        DefaultOut(node);
    }

    public override void CaseAVarDeclare(AVarDeclare node)
    {
        InAVarDeclare(node);
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        OutAVarDeclare(node);
    }
    public virtual void InAIntDeclareConstantDeclare(AIntDeclareConstantDeclare node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntDeclareConstantDeclare(AIntDeclareConstantDeclare node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntDeclareConstantDeclare(AIntDeclareConstantDeclare node)
    {
        InAIntDeclareConstantDeclare(node);
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetInt() != null)
        {
            node.GetInt().Apply(this);
        }
        if(node.GetEquals() != null)
        {
            node.GetEquals().Apply(this);
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetCon() != null)
        {
            node.GetCon().Apply(this);
        }
        OutAIntDeclareConstantDeclare(node);
    }
    public virtual void InAFloatDelcareConstantDeclare(AFloatDelcareConstantDeclare node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatDelcareConstantDeclare(AFloatDelcareConstantDeclare node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatDelcareConstantDeclare(AFloatDelcareConstantDeclare node)
    {
        InAFloatDelcareConstantDeclare(node);
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetFloat() != null)
        {
            node.GetFloat().Apply(this);
        }
        if(node.GetEquals() != null)
        {
            node.GetEquals().Apply(this);
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetCon() != null)
        {
            node.GetCon().Apply(this);
        }
        OutAFloatDelcareConstantDeclare(node);
    }
    public virtual void InAArrayDeclare(AArrayDeclare node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArrayDeclare(AArrayDeclare node)
    {
        DefaultOut(node);
    }

    public override void CaseAArrayDeclare(AArrayDeclare node)
    {
        InAArrayDeclare(node);
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetCloseBracket() != null)
        {
            node.GetCloseBracket().Apply(this);
        }
        if(node.GetNumber() != null)
        {
            node.GetNumber().Apply(this);
        }
        if(node.GetOpenBracket() != null)
        {
            node.GetOpenBracket().Apply(this);
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        OutAArrayDeclare(node);
    }
    public virtual void InAIfStatement(AIfStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfStatement(AIfStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfStatement(AIfStatement node)
    {
        InAIfStatement(node);
        if(node.GetCloseBrace() != null)
        {
            node.GetCloseBrace().Apply(this);
        }
        if(node.GetList() != null)
        {
            node.GetList().Apply(this);
        }
        if(node.GetOpenBrace() != null)
        {
            node.GetOpenBrace().Apply(this);
        }
        if(node.GetCloseParenthesis() != null)
        {
            node.GetCloseParenthesis().Apply(this);
        }
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        if(node.GetOpenParenthesis() != null)
        {
            node.GetOpenParenthesis().Apply(this);
        }
        if(node.GetIf() != null)
        {
            node.GetIf().Apply(this);
        }
        OutAIfStatement(node);
    }
    public virtual void InAWhileLoop(AWhileLoop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileLoop(AWhileLoop node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileLoop(AWhileLoop node)
    {
        InAWhileLoop(node);
        if(node.GetCloseBrace() != null)
        {
            node.GetCloseBrace().Apply(this);
        }
        if(node.GetList() != null)
        {
            node.GetList().Apply(this);
        }
        if(node.GetOpenBrace() != null)
        {
            node.GetOpenBrace().Apply(this);
        }
        if(node.GetCloseParenthesis() != null)
        {
            node.GetCloseParenthesis().Apply(this);
        }
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        if(node.GetOpenParenthesis() != null)
        {
            node.GetOpenParenthesis().Apply(this);
        }
        if(node.GetWhile() != null)
        {
            node.GetWhile().Apply(this);
        }
        OutAWhileLoop(node);
    }
    public virtual void InAExpressionAssignStatement(AExpressionAssignStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAExpressionAssignStatement(AExpressionAssignStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAExpressionAssignStatement(AExpressionAssignStatement node)
    {
        InAExpressionAssignStatement(node);
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        if(node.GetEquals() != null)
        {
            node.GetEquals().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAExpressionAssignStatement(node);
    }
    public virtual void InAArrayAssignStatement(AArrayAssignStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArrayAssignStatement(AArrayAssignStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAArrayAssignStatement(AArrayAssignStatement node)
    {
        InAArrayAssignStatement(node);
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetEqualto() != null)
        {
            node.GetEqualto().Apply(this);
        }
        if(node.GetEquals() != null)
        {
            node.GetEquals().Apply(this);
        }
        if(node.GetCloseBracket() != null)
        {
            node.GetCloseBracket().Apply(this);
        }
        if(node.GetInBracket() != null)
        {
            node.GetInBracket().Apply(this);
        }
        if(node.GetOpenBracket() != null)
        {
            node.GetOpenBracket().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAArrayAssignStatement(node);
    }
    public virtual void InAStartExp(AStartExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStartExp(AStartExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAStartExp(AStartExp node)
    {
        InAStartExp(node);
        if(node.GetComparators() != null)
        {
            node.GetComparators().Apply(this);
        }
        if(node.GetOr() != null)
        {
            node.GetOr().Apply(this);
        }
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutAStartExp(node);
    }
    public virtual void InAAndExp(AAndExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAndExp(AAndExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAAndExp(AAndExp node)
    {
        InAAndExp(node);
        if(node.GetComparators() != null)
        {
            node.GetComparators().Apply(this);
        }
        if(node.GetAnd() != null)
        {
            node.GetAnd().Apply(this);
        }
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutAAndExp(node);
    }
    public virtual void InANotEqualExp(ANotEqualExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutANotEqualExp(ANotEqualExp node)
    {
        DefaultOut(node);
    }

    public override void CaseANotEqualExp(ANotEqualExp node)
    {
        InANotEqualExp(node);
        if(node.GetComparators() != null)
        {
            node.GetComparators().Apply(this);
        }
        if(node.GetNotEqual() != null)
        {
            node.GetNotEqual().Apply(this);
        }
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutANotEqualExp(node);
    }
    public virtual void InAEqualToExp(AEqualToExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEqualToExp(AEqualToExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAEqualToExp(AEqualToExp node)
    {
        InAEqualToExp(node);
        if(node.GetComparators() != null)
        {
            node.GetComparators().Apply(this);
        }
        if(node.GetEqualTo() != null)
        {
            node.GetEqualTo().Apply(this);
        }
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutAEqualToExp(node);
    }
    public virtual void InANextExp(ANextExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutANextExp(ANextExp node)
    {
        DefaultOut(node);
    }

    public override void CaseANextExp(ANextExp node)
    {
        InANextExp(node);
        if(node.GetComparators() != null)
        {
            node.GetComparators().Apply(this);
        }
        OutANextExp(node);
    }
    public virtual void InAGreaterThanComparators(AGreaterThanComparators node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreaterThanComparators(AGreaterThanComparators node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreaterThanComparators(AGreaterThanComparators node)
    {
        InAGreaterThanComparators(node);
        if(node.GetTwo() != null)
        {
            node.GetTwo().Apply(this);
        }
        if(node.GetGreaterThan() != null)
        {
            node.GetGreaterThan().Apply(this);
        }
        if(node.GetOne() != null)
        {
            node.GetOne().Apply(this);
        }
        OutAGreaterThanComparators(node);
    }
    public virtual void InALessThanComparators(ALessThanComparators node)
    {
        DefaultIn(node);
    }

    public virtual void OutALessThanComparators(ALessThanComparators node)
    {
        DefaultOut(node);
    }

    public override void CaseALessThanComparators(ALessThanComparators node)
    {
        InALessThanComparators(node);
        if(node.GetTwo() != null)
        {
            node.GetTwo().Apply(this);
        }
        if(node.GetLessThan() != null)
        {
            node.GetLessThan().Apply(this);
        }
        if(node.GetOne() != null)
        {
            node.GetOne().Apply(this);
        }
        OutALessThanComparators(node);
    }
    public virtual void InAGreaterEqualComparators(AGreaterEqualComparators node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreaterEqualComparators(AGreaterEqualComparators node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreaterEqualComparators(AGreaterEqualComparators node)
    {
        InAGreaterEqualComparators(node);
        if(node.GetTwo() != null)
        {
            node.GetTwo().Apply(this);
        }
        if(node.GetGreaterEqual() != null)
        {
            node.GetGreaterEqual().Apply(this);
        }
        if(node.GetOne() != null)
        {
            node.GetOne().Apply(this);
        }
        OutAGreaterEqualComparators(node);
    }
    public virtual void InALessEqualComparators(ALessEqualComparators node)
    {
        DefaultIn(node);
    }

    public virtual void OutALessEqualComparators(ALessEqualComparators node)
    {
        DefaultOut(node);
    }

    public override void CaseALessEqualComparators(ALessEqualComparators node)
    {
        InALessEqualComparators(node);
        if(node.GetTwo() != null)
        {
            node.GetTwo().Apply(this);
        }
        if(node.GetLessEqual() != null)
        {
            node.GetLessEqual().Apply(this);
        }
        if(node.GetOne() != null)
        {
            node.GetOne().Apply(this);
        }
        OutALessEqualComparators(node);
    }
    public virtual void InANextComparators(ANextComparators node)
    {
        DefaultIn(node);
    }

    public virtual void OutANextComparators(ANextComparators node)
    {
        DefaultOut(node);
    }

    public override void CaseANextComparators(ANextComparators node)
    {
        InANextComparators(node);
        if(node.GetMath1() != null)
        {
            node.GetMath1().Apply(this);
        }
        OutANextComparators(node);
    }
    public virtual void InASubtractMath1(ASubtractMath1 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASubtractMath1(ASubtractMath1 node)
    {
        DefaultOut(node);
    }

    public override void CaseASubtractMath1(ASubtractMath1 node)
    {
        InASubtractMath1(node);
        if(node.GetMath2() != null)
        {
            node.GetMath2().Apply(this);
        }
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        if(node.GetMath1() != null)
        {
            node.GetMath1().Apply(this);
        }
        OutASubtractMath1(node);
    }
    public virtual void InAAddMath1(AAddMath1 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAddMath1(AAddMath1 node)
    {
        DefaultOut(node);
    }

    public override void CaseAAddMath1(AAddMath1 node)
    {
        InAAddMath1(node);
        if(node.GetMath2() != null)
        {
            node.GetMath2().Apply(this);
        }
        if(node.GetPlus() != null)
        {
            node.GetPlus().Apply(this);
        }
        if(node.GetMath1() != null)
        {
            node.GetMath1().Apply(this);
        }
        OutAAddMath1(node);
    }
    public virtual void InANextMath1(ANextMath1 node)
    {
        DefaultIn(node);
    }

    public virtual void OutANextMath1(ANextMath1 node)
    {
        DefaultOut(node);
    }

    public override void CaseANextMath1(ANextMath1 node)
    {
        InANextMath1(node);
        if(node.GetMath2() != null)
        {
            node.GetMath2().Apply(this);
        }
        OutANextMath1(node);
    }
    public virtual void InADivideMath2(ADivideMath2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutADivideMath2(ADivideMath2 node)
    {
        DefaultOut(node);
    }

    public override void CaseADivideMath2(ADivideMath2 node)
    {
        InADivideMath2(node);
        if(node.GetEndExp() != null)
        {
            node.GetEndExp().Apply(this);
        }
        if(node.GetDivide() != null)
        {
            node.GetDivide().Apply(this);
        }
        if(node.GetMath2() != null)
        {
            node.GetMath2().Apply(this);
        }
        OutADivideMath2(node);
    }
    public virtual void InAMultiplyMath2(AMultiplyMath2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultiplyMath2(AMultiplyMath2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultiplyMath2(AMultiplyMath2 node)
    {
        InAMultiplyMath2(node);
        if(node.GetEndExp() != null)
        {
            node.GetEndExp().Apply(this);
        }
        if(node.GetMultiply() != null)
        {
            node.GetMultiply().Apply(this);
        }
        if(node.GetMath2() != null)
        {
            node.GetMath2().Apply(this);
        }
        OutAMultiplyMath2(node);
    }
    public virtual void InANextMath2(ANextMath2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutANextMath2(ANextMath2 node)
    {
        DefaultOut(node);
    }

    public override void CaseANextMath2(ANextMath2 node)
    {
        InANextMath2(node);
        if(node.GetEndExp() != null)
        {
            node.GetEndExp().Apply(this);
        }
        OutANextMath2(node);
    }
    public virtual void InACallTopEndExp(ACallTopEndExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutACallTopEndExp(ACallTopEndExp node)
    {
        DefaultOut(node);
    }

    public override void CaseACallTopEndExp(ACallTopEndExp node)
    {
        InACallTopEndExp(node);
        if(node.GetCloseParenthesis() != null)
        {
            node.GetCloseParenthesis().Apply(this);
        }
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        if(node.GetOpenParenthesis() != null)
        {
            node.GetOpenParenthesis().Apply(this);
        }
        OutACallTopEndExp(node);
    }
    public virtual void InAEndEndExp(AEndEndExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEndEndExp(AEndEndExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAEndEndExp(AEndEndExp node)
    {
        InAEndEndExp(node);
        if(node.GetNumber() != null)
        {
            node.GetNumber().Apply(this);
        }
        OutAEndEndExp(node);
    }
    public virtual void InAIntNumber(AIntNumber node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntNumber(AIntNumber node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntNumber(AIntNumber node)
    {
        InAIntNumber(node);
        if(node.GetInt() != null)
        {
            node.GetInt().Apply(this);
        }
        OutAIntNumber(node);
    }
    public virtual void InAFloatNumber(AFloatNumber node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatNumber(AFloatNumber node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatNumber(AFloatNumber node)
    {
        InAFloatNumber(node);
        if(node.GetFloat() != null)
        {
            node.GetFloat().Apply(this);
        }
        OutAFloatNumber(node);
    }
    public virtual void InAIdNumber(AIdNumber node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIdNumber(AIdNumber node)
    {
        DefaultOut(node);
    }

    public override void CaseAIdNumber(AIdNumber node)
    {
        InAIdNumber(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAIdNumber(node);
    }
    public virtual void InAArrayNumber(AArrayNumber node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArrayNumber(AArrayNumber node)
    {
        DefaultOut(node);
    }

    public override void CaseAArrayNumber(AArrayNumber node)
    {
        InAArrayNumber(node);
        if(node.GetCloseBracket() != null)
        {
            node.GetCloseBracket().Apply(this);
        }
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        if(node.GetOpenBracket() != null)
        {
            node.GetOpenBracket().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAArrayNumber(node);
    }
}
} // namespace comp5210.analysis
